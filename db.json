{"Asset":[{"_id":"themes\\cover\\source\\favicon.ico","path":"favicon.ico","modified":true},{"_id":"themes\\cover\\source\\logo.png","path":"logo.png","modified":true},{"_id":"themes\\cover\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes\\cover\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes\\cover\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes\\cover\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes\\cover\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes\\cover\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes\\cover\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes\\cover\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes\\cover\\source\\js\\bootstrap.min.js","path":"js/bootstrap.min.js","modified":true},{"_id":"themes\\cover\\source\\js\\cover.js","path":"js/cover.js","modified":true},{"_id":"themes\\cover\\source\\js\\gallery.js","path":"js/gallery.js","modified":true},{"_id":"themes\\cover\\source\\js\\jquery.anystretch.min.js","path":"js/jquery.anystretch.min.js","modified":true},{"_id":"themes\\cover\\source\\js\\jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":true},{"_id":"themes\\cover\\source\\css\\style.styl","path":"css/style.styl","modified":true},{"_id":"source\\CNAME","path":"CNAME","modified":true},{"_id":"source\\favicon.ico","path":"favicon.ico","modified":true},{"_id":"source\\logo.png","path":"logo.png","modified":true},{"_id":"source\\md\\static\\img\\glyphicons-halflings-white.png","path":"md/static/img/glyphicons-halflings-white.png","modified":true},{"_id":"source\\md\\static\\img\\glyphicons-halflings.png","path":"md/static/img/glyphicons-halflings.png","modified":true},{"_id":"source\\md\\static\\js\\bootstrap.js","path":"md/static/js/bootstrap.js","modified":true},{"_id":"source\\md\\static\\js\\jquery-1.8.3.js","path":"md/static/js/jquery-1.8.3.js","modified":true},{"_id":"source\\md\\static\\js\\jquery-1.8.3.min.js","path":"md/static/js/jquery-1.8.3.min.js","modified":true},{"_id":"source\\md\\static\\js\\jquery-ui-1.10.2.custom.js","path":"md/static/js/jquery-ui-1.10.2.custom.js","modified":true},{"_id":"source\\md\\static\\js\\jquery-ui-1.10.2.custom.min.js","path":"md/static/js/jquery-ui-1.10.2.custom.min.js","modified":true},{"_id":"source\\md\\static\\js\\jquery.storage.js","path":"md/static/js/jquery.storage.js","modified":true},{"_id":"source\\md\\static\\js\\jquery.ui.datepicker-zh-CN.js","path":"md/static/js/jquery.ui.datepicker-zh-CN.js","modified":true},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome-ie7.css","path":"md/static/font-awesome/css/font-awesome-ie7.css","modified":true},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome-ie7.min.css","path":"md/static/font-awesome/css/font-awesome-ie7.min.css","modified":true},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome.css","path":"md/static/font-awesome/css/font-awesome.css","modified":true},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome.min.css","path":"md/static/font-awesome/css/font-awesome.min.css","modified":true},{"_id":"source\\md\\static\\font-awesome\\font\\FontAwesome.otf","path":"md/static/font-awesome/font/FontAwesome.otf","modified":true},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.eot","path":"md/static/font-awesome/font/fontawesome-webfont.eot","modified":true},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.svg","path":"md/static/font-awesome/font/fontawesome-webfont.svg","modified":true},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.ttf","path":"md/static/font-awesome/font/fontawesome-webfont.ttf","modified":true},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.woff","path":"md/static/font-awesome/font/fontawesome-webfont.woff","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\bootstrap.less","path":"md/static/font-awesome/less/bootstrap.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\core.less","path":"md/static/font-awesome/less/core.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\extras.less","path":"md/static/font-awesome/less/extras.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\font-awesome-ie7.less","path":"md/static/font-awesome/less/font-awesome-ie7.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\font-awesome.less","path":"md/static/font-awesome/less/font-awesome.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\icons.less","path":"md/static/font-awesome/less/icons.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\mixins.less","path":"md/static/font-awesome/less/mixins.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\path.less","path":"md/static/font-awesome/less/path.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\less\\variables.less","path":"md/static/font-awesome/less/variables.less","modified":true},{"_id":"source\\md\\static\\font-awesome\\scss\\font-awesome-ie7.scss","path":"md/static/font-awesome/scss/font-awesome-ie7.scss","modified":true},{"_id":"source\\md\\static\\font-awesome\\scss\\font-awesome.scss","path":"md/static/font-awesome/scss/font-awesome.scss","modified":true},{"_id":"source\\md\\static\\css\\bootstrap-responsive.css","path":"md/static/css/bootstrap-responsive.css","modified":true},{"_id":"source\\md\\static\\css\\bootstrap.css","path":"md/static/css/bootstrap.css","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\jquery-ui-1.10.2.custom.css","path":"md/static/css/smoothness/jquery-ui-1.10.2.custom.css","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\jquery-ui-1.10.2.custom.min.css","path":"md/static/css/smoothness/jquery-ui-1.10.2.custom.min.css","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\animated-overlay.gif","path":"md/static/css/smoothness/images/animated-overlay.gif","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_flat_0_aaaaaa_40x100.png","path":"md/static/css/smoothness/images/ui-bg_flat_0_aaaaaa_40x100.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_flat_75_ffffff_40x100.png","path":"md/static/css/smoothness/images/ui-bg_flat_75_ffffff_40x100.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_55_fbf9ee_1x400.png","path":"md/static/css/smoothness/images/ui-bg_glass_55_fbf9ee_1x400.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_65_ffffff_1x400.png","path":"md/static/css/smoothness/images/ui-bg_glass_65_ffffff_1x400.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_75_dadada_1x400.png","path":"md/static/css/smoothness/images/ui-bg_glass_75_dadada_1x400.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_75_e6e6e6_1x400.png","path":"md/static/css/smoothness/images/ui-bg_glass_75_e6e6e6_1x400.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_95_fef1ec_1x400.png","path":"md/static/css/smoothness/images/ui-bg_glass_95_fef1ec_1x400.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_highlight-soft_75_cccccc_1x100.png","path":"md/static/css/smoothness/images/ui-bg_highlight-soft_75_cccccc_1x100.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_222222_256x240.png","path":"md/static/css/smoothness/images/ui-icons_222222_256x240.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_2e83ff_256x240.png","path":"md/static/css/smoothness/images/ui-icons_2e83ff_256x240.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_454545_256x240.png","path":"md/static/css/smoothness/images/ui-icons_454545_256x240.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_888888_256x240.png","path":"md/static/css/smoothness/images/ui-icons_888888_256x240.png","modified":true},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_cd0a0a_256x240.png","path":"md/static/css/smoothness/images/ui-icons_cd0a0a_256x240.png","modified":true},{"_id":"source\\md\\static\\editor\\Markdown.Extra.js","path":"md/static/editor/Markdown.Extra.js","modified":true},{"_id":"source\\md\\static\\editor\\css_browser_selector.js","path":"md/static/editor/css_browser_selector.js","modified":true},{"_id":"source\\md\\static\\editor\\editor.css","path":"md/static/editor/editor.css","modified":true},{"_id":"source\\md\\static\\editor\\editor.js","path":"md/static/editor/editor.js","modified":true},{"_id":"source\\md\\static\\editor\\jquery.autosize-min.js","path":"md/static/editor/jquery.autosize-min.js","modified":true},{"_id":"source\\md\\static\\editor\\jquery.waitforimages.js","path":"md/static/editor/jquery.waitforimages.js","modified":true},{"_id":"source\\md\\static\\editor\\mathJax.js","path":"md/static/editor/mathJax.js","modified":true},{"_id":"source\\md\\static\\editor\\md-help","path":"md/static/editor/md-help","modified":true},{"_id":"source\\md\\static\\editor\\scrollLink.js","path":"md/static/editor/scrollLink.js","modified":true},{"_id":"source\\md\\static\\editor\\underscore.js","path":"md/static/editor/underscore.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-apollo.js","path":"md/static/editor/google-code-prettify/lang-apollo.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-basic.js","path":"md/static/editor/google-code-prettify/lang-basic.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-clj.js","path":"md/static/editor/google-code-prettify/lang-clj.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-css.js","path":"md/static/editor/google-code-prettify/lang-css.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-dart.js","path":"md/static/editor/google-code-prettify/lang-dart.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-erlang.js","path":"md/static/editor/google-code-prettify/lang-erlang.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-go.js","path":"md/static/editor/google-code-prettify/lang-go.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-hs.js","path":"md/static/editor/google-code-prettify/lang-hs.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-lisp.js","path":"md/static/editor/google-code-prettify/lang-lisp.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-llvm.js","path":"md/static/editor/google-code-prettify/lang-llvm.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-lua.js","path":"md/static/editor/google-code-prettify/lang-lua.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-matlab.js","path":"md/static/editor/google-code-prettify/lang-matlab.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-ml.js","path":"md/static/editor/google-code-prettify/lang-ml.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-mumps.js","path":"md/static/editor/google-code-prettify/lang-mumps.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-n.js","path":"md/static/editor/google-code-prettify/lang-n.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-pascal.js","path":"md/static/editor/google-code-prettify/lang-pascal.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-proto.js","path":"md/static/editor/google-code-prettify/lang-proto.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-r.js","path":"md/static/editor/google-code-prettify/lang-r.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-rd.js","path":"md/static/editor/google-code-prettify/lang-rd.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-scala.js","path":"md/static/editor/google-code-prettify/lang-scala.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-sql.js","path":"md/static/editor/google-code-prettify/lang-sql.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-tcl.js","path":"md/static/editor/google-code-prettify/lang-tcl.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-tex.js","path":"md/static/editor/google-code-prettify/lang-tex.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-vb.js","path":"md/static/editor/google-code-prettify/lang-vb.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-vhdl.js","path":"md/static/editor/google-code-prettify/lang-vhdl.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-wiki.js","path":"md/static/editor/google-code-prettify/lang-wiki.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-xq.js","path":"md/static/editor/google-code-prettify/lang-xq.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-yaml.js","path":"md/static/editor/google-code-prettify/lang-yaml.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\prettify.css","path":"md/static/editor/google-code-prettify/prettify.css","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\prettify.js","path":"md/static/editor/google-code-prettify/prettify.js","modified":true},{"_id":"source\\md\\static\\editor\\google-code-prettify\\run_prettify.js","path":"md/static/editor/google-code-prettify/run_prettify.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\LICENSE.txt","path":"md/static/editor/pagedown/LICENSE.txt","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Converter.js","path":"md/static/editor/pagedown/Markdown.Converter.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Editor.js","path":"md/static/editor/pagedown/Markdown.Editor.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Sanitizer.js","path":"md/static/editor/pagedown/Markdown.Sanitizer.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\README.txt","path":"md/static/editor/pagedown/README.txt","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\node-pagedown.js","path":"md/static/editor/pagedown/node-pagedown.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\package.json","path":"md/static/editor/pagedown/package.json","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\wmd-buttons.png","path":"md/static/editor/pagedown/wmd-buttons.png","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\local\\Markdown.local.fr.js","path":"md/static/editor/pagedown/local/Markdown.local.fr.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\local\\Markdown.local.zh.js","path":"md/static/editor/pagedown/local/Markdown.local.zh.js","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\resources\\wmd-buttons.psd","path":"md/static/editor/pagedown/resources/wmd-buttons.psd","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\demo\\browser\\demo.css","path":"md/static/editor/pagedown/demo/browser/demo.css","modified":true},{"_id":"source\\md\\static\\editor\\pagedown\\demo\\node\\demo.js","path":"md/static/editor/pagedown/demo/node/demo.js","modified":true}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1408878000000},{"_id":"scaffolds\\page.md","mtime":1408878000000},{"_id":"scaffolds\\photo.md","mtime":1408878000000},{"_id":"scaffolds\\post.md","mtime":1408878000000},{"_id":"themes\\cover\\LICENSE","mtime":1408873228000},{"_id":"themes\\cover\\README.md","mtime":1408873228000},{"_id":"themes\\cover\\_config.yml","mtime":1408964639000},{"_id":"themes\\cover\\languages\\de.yml","mtime":1408873560000},{"_id":"themes\\cover\\languages\\default.yml","mtime":1408873599000},{"_id":"themes\\cover\\layout\\about.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\archive.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\blog.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\category.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\index.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\layout.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\page.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\post.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\tag.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_widget\\category.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_widget\\recent_posts.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_widget\\search.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_widget\\tag.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_widget\\tagcloud.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\about.ejs","mtime":1408889389000},{"_id":"themes\\cover\\layout\\_partial\\after_footer.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\archive.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\article.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\comment.ejs","mtime":1408889444000},{"_id":"themes\\cover\\layout\\_partial\\duoshuo_comment.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\footer.ejs","mtime":1408958981000},{"_id":"themes\\cover\\layout\\_partial\\google_analytics.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\head.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\header.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\pagination.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\sidebar.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\social.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\post\\category.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\post\\gallery.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\post\\share.ejs","mtime":1408964324000},{"_id":"themes\\cover\\layout\\_partial\\post\\tag.ejs","mtime":1408873228000},{"_id":"themes\\cover\\layout\\_partial\\post\\title.ejs","mtime":1408873228000},{"_id":"themes\\cover\\source\\favicon.ico","mtime":1408873228000},{"_id":"themes\\cover\\source\\logo.png","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\blank.gif","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\fancybox_loading.gif","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\fancybox_overlay.png","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\fancybox_sprite.png","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\jquery.fancybox.css","mtime":1408873228000},{"_id":"themes\\cover\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\js\\bootstrap.min.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\js\\cover.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\js\\gallery.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\js\\jquery.anystretch.min.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\js\\jquery.imagesloaded.min.js","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\style.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_base\\layout.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_base\\utils.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_base\\variable.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\archive.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\article.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\comment.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\footer.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\header.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\index.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\sidebar.styl","mtime":1408873228000},{"_id":"themes\\cover\\source\\css\\_partial\\syntax.styl","mtime":1408873228000},{"_id":"source\\CNAME","mtime":1408868710000},{"_id":"source\\favicon.ico","mtime":1408950397000},{"_id":"source\\logo.png","mtime":1408889984000},{"_id":"source\\_posts\\new-hexo-blog.md","mtime":1408958403000},{"_id":"source\\maths\\index.md","mtime":1408936312000},{"_id":"source\\md\\index.html","mtime":1408876861000},{"_id":"source\\md\\python_to_go.markdown","mtime":1380973054000},{"_id":"source\\md\\stubhub_blog.markdown","mtime":1380973054000},{"_id":"source\\md\\static\\img\\glyphicons-halflings-white.png","mtime":1380973054000},{"_id":"source\\md\\static\\img\\glyphicons-halflings.png","mtime":1380973054000},{"_id":"source\\md\\static\\js\\bootstrap.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery-1.8.3.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery-1.8.3.min.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery-ui-1.10.2.custom.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery-ui-1.10.2.custom.min.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery.storage.js","mtime":1380973054000},{"_id":"source\\md\\static\\js\\jquery.ui.datepicker-zh-CN.js","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome-ie7.css","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome-ie7.min.css","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome.css","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\css\\font-awesome.min.css","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\font\\FontAwesome.otf","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.eot","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.svg","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.ttf","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\font\\fontawesome-webfont.woff","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\bootstrap.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\core.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\extras.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\font-awesome-ie7.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\font-awesome.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\icons.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\mixins.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\path.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\less\\variables.less","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\scss\\font-awesome-ie7.scss","mtime":1380973054000},{"_id":"source\\md\\static\\font-awesome\\scss\\font-awesome.scss","mtime":1380973054000},{"_id":"source\\md\\static\\css\\bootstrap-responsive.css","mtime":1380973054000},{"_id":"source\\md\\static\\css\\bootstrap.css","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\jquery-ui-1.10.2.custom.css","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\jquery-ui-1.10.2.custom.min.css","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\animated-overlay.gif","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_flat_0_aaaaaa_40x100.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_flat_75_ffffff_40x100.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_55_fbf9ee_1x400.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_65_ffffff_1x400.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_75_dadada_1x400.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_75_e6e6e6_1x400.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_glass_95_fef1ec_1x400.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-bg_highlight-soft_75_cccccc_1x100.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_222222_256x240.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_2e83ff_256x240.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_454545_256x240.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_888888_256x240.png","mtime":1380973054000},{"_id":"source\\md\\static\\css\\smoothness\\images\\ui-icons_cd0a0a_256x240.png","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\Markdown.Extra.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\css_browser_selector.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\editor.css","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\editor.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\jquery.autosize-min.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\jquery.waitforimages.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\mathJax.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\md-help","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\scrollLink.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\underscore.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-apollo.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-basic.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-clj.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-css.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-dart.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-erlang.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-go.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-hs.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-lisp.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-llvm.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-lua.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-matlab.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-ml.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-mumps.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-n.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-pascal.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-proto.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-r.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-rd.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-scala.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-sql.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-tcl.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-tex.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-vb.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-vhdl.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-wiki.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-xq.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\lang-yaml.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\prettify.css","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\prettify.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\google-code-prettify\\run_prettify.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\LICENSE.txt","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Converter.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Editor.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\Markdown.Sanitizer.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\README.txt","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\node-pagedown.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\package.json","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\wmd-buttons.png","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\local\\Markdown.local.fr.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\local\\Markdown.local.zh.js","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\resources\\wmd-buttons.psd","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\demo\\browser\\demo.css","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\demo\\browser\\demo.html","mtime":1380973054000},{"_id":"source\\md\\static\\editor\\pagedown\\demo\\node\\demo.js","mtime":1380973054000}],"Category":[],"Page":[{"title":"maths","date":1408936311000,"content":"","source":"maths/index.md","raw":"title: maths\ndate: 2014-08-25 11:11:51\n---\n","updated":1408936312000,"path":"maths/index.html","excerpt":"","_id":"1enwfhgn1at5c0yz","comments":true,"layout":"page"},{"content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Online Markdown Editor</title>\n\n        <!-- Bootstrap -->\n\t\t<link href=\"static/css/bootstrap.css\" rel=\"stylesheet\" media=\"screen\">\n\n        <!-- jQuery UI -->\n\t\t<link href=\"static/css/smoothness/jquery-ui-1.10.2.custom.min.css\" rel=\"stylesheet\" media=\"screen\">\n\n        <!-- awesome font -->\n        <link href=\"static/font-awesome/css/font-awesome.css\" rel=\"stylesheet\">\n\n        <link href=\"static/editor/google-code-prettify/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n        <link href=\"static/editor/editor.css\" rel=\"stylesheet\">\n\n        <!-- Bootstrap Responsive -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link href=\"static/css/bootstrap-responsive.css\" rel=\"stylesheet\">\n\n\n        \n</head>\n    <body class=\"theme\">\n\n        <div id=\"container\">\n            <div id=\"editor-nav-bar\">\n                <div id=\"wmd-button-bar\" class=\"pull-left\"></div>\n                <div id=\"preview-button-bar\" class=\"pull-right\">\n                    <ul id=\"preview-button-row\" class=\"preview-button-row\">\n                        <li class=\"preview-button\" id=\"preview-new-button\" title=\"新建文件 Ctrl+Alt+N\">\n                            <span class=\"icon-file muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-theme-button\" title=\"主题切换 Ctrl+Alt+J\">\n                            <span class=\"icon-shield muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-reader-full-button\" title=\"阅读模式 Ctrl+Alt+M\">\n                            <span class=\"icon-desktop muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-reader-small-button\" title=\"预览模式 Ctrl+Alt+M\">\n                            <span class=\"icon-columns muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-fullscreen-button\" title=\"全屏模式 F11\">\n                            <span class=\"icon-fullscreen muted\"></span>\n                        </li>\n                        <!-- There is at least one item of 'wmd-spacer' must be in the ul list, otherwise, the hover on the button leads to page issue. -->\n                        <li class=\"wmd-spacer\"></li>\n                    </ul>\n                </div>\n               \n                <div class=\"clearfix\"></div>\n            </div>\n\n            <div id=\"left-column\" class=\"pull-left\">\n                <div id=\"wmd-panel-editor\" class=\"wmd-panel-editor\">\n                    <textarea class=\"wmd-input theme\" id=\"wmd-input\" spellcheck=\"false\"></textarea>\n                </div>\n            </div>\n            <div id=\"right-column\" class=\"pull-right\">\n                <div id=\"wmd-panel-preview\" class=\"wmd-panel-preview preview-container\">\n                    <div id=\"wmd-preview\" class=\"wmd-preview\"></div>\n                </div>\n            </div>\n\n            <div class=\"clearfix\"></div>\n        </div>\n\n\n        <!-- Hidden md-section-helper is used to calculate the height of md sections. -->\n        <textarea id=\"md-section-helper\"></textarea>\n\n        <!-- Hidden Popup Modal -->\n        <div id=\"editorDialog\" class=\"modal hide fade theme\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"notification-title\" aria-hidden=\"true\">\n            <div class=\"modal-header theme\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                <h3 id=\"editorDialog-title\"></h3>\n            </div>\n            <div class=\"modal-body theme\">\n                <p></p>\n                <i class=\"icon-2x\"></i> <input class=\"span5\" type=\"text\" placeholder=\"\">\n            </div>\n            <div class=\"modal-footer theme\">\n                <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">取消</button>\n                <button id=\"editorDialog-confirm\" class=\"btn btn-primary\">确认</button>\n            </div>\n        </div>\n\n        <!-- full editor reader, hidden when loading. -->\n        <div id=\"editor-reader-full\" class=\"editor-reader-full-hidden\">\n        </div>\n\n\n\t\t<!-- Hidden Popup Modal -->\n\t\t<div id=\"notification\" class=\"modal hide fade theme\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"notification-title\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-header theme\">\n\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n\t\t\t\t<h3 id=\"notification-title\">通知</h3>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body theme\">\n\t\t\t\t<p></p>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer theme\">\n\t\t\t\t<button id=\"notification-cancel\" class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">取消</button>\n\t\t\t\t<button id=\"notification-confirm\" class=\"btn btn-primary\">确认</button>\n\t\t\t</div>\n\t\t</div>\n\n\n        <!-- jquery & Bootstrap -->\n        <script src=\"static/js/jquery-1.8.3.min.js\"></script>\n        <script src=\"static/js/jquery-ui-1.10.2.custom.min.js\"></script>\n        <script src=\"static/js/jquery.ui.datepicker-zh-CN.js\"></script>\n        <script src=\"static/js/bootstrap.js\"></script>\n\n        <script src=\"static/js/jquery.storage.js\"></script>\n        <script src=\"static/editor/google-code-prettify/prettify.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Converter.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Sanitizer.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Editor.js\"></script>\n        <script src=\"static/editor/pagedown/local/Markdown.local.zh.js\"></script>\n        <script src=\"static/editor/Markdown.Extra.js\"></script>\n        <script src=\"static/editor/underscore.js\"></script>\n        <script src=\"static/editor/css_browser_selector.js\"></script>\n        <script src=\"static/editor/scrollLink.js\"></script>\n        <!--mathjax-->\n        <script type=\"text/x-mathjax-config\">\n          MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], [\"\\\\(\",\"\\\\)\"]], processEscapes: true },  messageStyle: \"none\"});\n        </script>\n        <!--mathjax source code is here: https://github.com/mathjax/MathJax, you could host it on your own server one day.-->\n        <script src=\"static/editor/mathJax.js\"></script>\n        <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n        <script src=\"static/editor/jquery.waitforimages.js\"></script>\n        <script src=\"static/editor/jquery.autosize-min.js\"></script>\n        <script src=\"static/editor/editor.js\"></script>\n    </body>\n</html>\n    \n","source":"md/index.html","raw":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Online Markdown Editor</title>\n\n        <!-- Bootstrap -->\n\t\t<link href=\"static/css/bootstrap.css\" rel=\"stylesheet\" media=\"screen\">\n\n        <!-- jQuery UI -->\n\t\t<link href=\"static/css/smoothness/jquery-ui-1.10.2.custom.min.css\" rel=\"stylesheet\" media=\"screen\">\n\n        <!-- awesome font -->\n        <link href=\"static/font-awesome/css/font-awesome.css\" rel=\"stylesheet\">\n\n        <link href=\"static/editor/google-code-prettify/prettify.css\" type=\"text/css\" rel=\"stylesheet\">\n        <link href=\"static/editor/editor.css\" rel=\"stylesheet\">\n\n        <!-- Bootstrap Responsive -->\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link href=\"static/css/bootstrap-responsive.css\" rel=\"stylesheet\">\n\n\n        \n</head>\n    <body class=\"theme\">\n\n        <div id=\"container\">\n            <div id=\"editor-nav-bar\">\n                <div id=\"wmd-button-bar\" class=\"pull-left\"></div>\n                <div id=\"preview-button-bar\" class=\"pull-right\">\n                    <ul id=\"preview-button-row\" class=\"preview-button-row\">\n                        <li class=\"preview-button\" id=\"preview-new-button\" title=\"新建文件 Ctrl+Alt+N\">\n                            <span class=\"icon-file muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-theme-button\" title=\"主题切换 Ctrl+Alt+J\">\n                            <span class=\"icon-shield muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-reader-full-button\" title=\"阅读模式 Ctrl+Alt+M\">\n                            <span class=\"icon-desktop muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-reader-small-button\" title=\"预览模式 Ctrl+Alt+M\">\n                            <span class=\"icon-columns muted\"></span>\n                        </li>\n                        <li class=\"preview-button\" id=\"preview-fullscreen-button\" title=\"全屏模式 F11\">\n                            <span class=\"icon-fullscreen muted\"></span>\n                        </li>\n                        <!-- There is at least one item of 'wmd-spacer' must be in the ul list, otherwise, the hover on the button leads to page issue. -->\n                        <li class=\"wmd-spacer\"></li>\n                    </ul>\n                </div>\n               \n                <div class=\"clearfix\"></div>\n            </div>\n\n            <div id=\"left-column\" class=\"pull-left\">\n                <div id=\"wmd-panel-editor\" class=\"wmd-panel-editor\">\n                    <textarea class=\"wmd-input theme\" id=\"wmd-input\" spellcheck=\"false\"></textarea>\n                </div>\n            </div>\n            <div id=\"right-column\" class=\"pull-right\">\n                <div id=\"wmd-panel-preview\" class=\"wmd-panel-preview preview-container\">\n                    <div id=\"wmd-preview\" class=\"wmd-preview\"></div>\n                </div>\n            </div>\n\n            <div class=\"clearfix\"></div>\n        </div>\n\n\n        <!-- Hidden md-section-helper is used to calculate the height of md sections. -->\n        <textarea id=\"md-section-helper\"></textarea>\n\n        <!-- Hidden Popup Modal -->\n        <div id=\"editorDialog\" class=\"modal hide fade theme\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"notification-title\" aria-hidden=\"true\">\n            <div class=\"modal-header theme\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n                <h3 id=\"editorDialog-title\"></h3>\n            </div>\n            <div class=\"modal-body theme\">\n                <p></p>\n                <i class=\"icon-2x\"></i> <input class=\"span5\" type=\"text\" placeholder=''>\n            </div>\n            <div class=\"modal-footer theme\">\n                <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">取消</button>\n                <button id=\"editorDialog-confirm\" class=\"btn btn-primary\">确认</button>\n            </div>\n        </div>\n\n        <!-- full editor reader, hidden when loading. -->\n        <div id=\"editor-reader-full\" class=\"editor-reader-full-hidden\">\n        </div>\n\n\n\t\t<!-- Hidden Popup Modal -->\n\t\t<div id=\"notification\" class=\"modal hide fade theme\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"notification-title\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-header theme\">\n\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">×</button>\n\t\t\t\t<h3 id=\"notification-title\">通知</h3>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body theme\">\n\t\t\t\t<p></p>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer theme\">\n\t\t\t\t<button id=\"notification-cancel\" class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">取消</button>\n\t\t\t\t<button id=\"notification-confirm\" class=\"btn btn-primary\">确认</button>\n\t\t\t</div>\n\t\t</div>\n\n\n        <!-- jquery & Bootstrap -->\n        <script src=\"static/js/jquery-1.8.3.min.js\"></script>\n        <script src=\"static/js/jquery-ui-1.10.2.custom.min.js\"></script>\n        <script src=\"static/js/jquery.ui.datepicker-zh-CN.js\"></script>\n        <script src=\"static/js/bootstrap.js\"></script>\n\n        <script src=\"static/js/jquery.storage.js\"></script>\n        <script src=\"static/editor/google-code-prettify/prettify.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Converter.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Sanitizer.js\"></script>\n        <script src=\"static/editor/pagedown/Markdown.Editor.js\"></script>\n        <script src=\"static/editor/pagedown/local/Markdown.local.zh.js\"></script>\n        <script src=\"static/editor/Markdown.Extra.js\"></script>\n        <script src=\"static/editor/underscore.js\"></script>\n        <script src=\"static/editor/css_browser_selector.js\"></script>\n        <script src=\"static/editor/scrollLink.js\"></script>\n        <!--mathjax-->\n        <script type=\"text/x-mathjax-config\">\n          MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], [\"\\\\(\",\"\\\\)\"]], processEscapes: true },  messageStyle: \"none\"});\n        </script>\n        <!--mathjax source code is here: https://github.com/mathjax/MathJax, you could host it on your own server one day.-->\n        <script src=\"static/editor/mathJax.js\"></script>\n        <script src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\n        <script src=\"static/editor/jquery.waitforimages.js\"></script>\n        <script src=\"static/editor/jquery.autosize-min.js\"></script>\n        <script src=\"static/editor/editor.js\"></script>\n    </body>\n</html>\n    \n","date":1408957428000,"updated":1408876861000,"path":"md/index.html","excerpt":"","_id":"l3lj36glqzt35mwv","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"Python_开发者在迁徙到_Go_语言之前需要了解什么？\">Python 开发者在迁徙到 Go 语言之前需要了解什么？</h1>\n<p>这是一篇（长）博文， 介绍了我们在 Repustate 迁移大量 Python/Cython 代码到 Go 语言的经验。如果你想了解整个故事，背景和所有的事情，请继续往下读。如果你只是想了解 Python 开发者在一头扎进 Go 语言前需要了解什么，请点击一下链接：</p>\n<p><a href=\"http://blog.repustate.com/migrating-code-from-python-to-golang-what-you-need-to-know/2013/04/23/#tips\" target=\"_blank\" rel=\"external\">Tips &amp; tricks in migrating from Python to Go.</a></p>\n<h2 id=\"背景\">背景</h2>\n<p>在 Repustate，我们完成过的最棒的技术成就之一是实现了阿拉伯语的情感分析。阿拉伯语是一块难啃的硬骨头，因为它的词形变化相当复杂。比起譬如英语，阿拉伯语的分词（将一个句子切分呈几个独立的单词）也更困难，因为阿拉伯语的单词本身还可能会包含空白字符（例如：“阿列夫”在一个单词里的位置）。这也谈不上是泄密，Repustate 使用支持向量机（SVM）来获取一个句子背后最有可能的含义，并在其中加上情感元素。 总体上来说，我们使用了 22 种模型（22 个 SVM） 并且在一篇文档中，每一个单词我们都会加以分析。因此如果你有一篇 500 字的文档，那么基于 SVM，会进行十万次的比较。</p>\n<h2 id=\"Python\">Python</h2>\n<p>Repustate 几乎完全就是一个 Python 商店。我们使用 Django 来实现 API 和网站。因此（目前）为了保持代码一致，同时使用 Python 来实现阿拉伯语情感引擎是合情合理的。只是做原型和实现的话，Python 是很好的选择。它的表达能力很强悍，第三方类库等等也很好。如果你就是为了网页服务，Python 很完美。但是当你进行低级别的计算，大量依赖于哈希表（Python 里的字典类型）做比较的时候，一切都变慢了。我们每秒能处理大约两到三个阿拉伯文档，但是这太慢了。比较下来，我们的英语情感引擎每秒能处理大约五百份文档。</p>\n<h2 id=\"瓶颈\">瓶颈</h2>\n<p>因此我们开启了 Python 分析器，开始调查是什么地方用了那么长时间。还记得我前面说过我们有 22 个 SVM 并且每个单词都需要经过处理吗？好吧，这些都是线性处理的不是并行的。所以我们的第一反应是把线性处理改成 map/reduce 那样的操作。简单来说：Python 不太适合用作 map/reduce。当你需要并发的时候，Python 算不上好用。在 2013 Python 大会上（译者：PyCon 2013），Guido 谈到了 Tulip，他的这个新项目正在弥补 Python 这方面的不足，不过得过段一段时间才能推出，但是如果已经有了更好用的东西，我们为什么还要等呢？</p>\n<h2 id=\"选_Go_语言还是回家算了？\">选 Go 语言还是回家算了？</h2>\n<p>我在Mozilla的朋友告诉我，Mozilla 内部正在将他们大量的基础日志架构切换到 Go 语言上，部分原因是因为强大的 <a href=\"http://golang.org/doc/effective_go.html#goroutines\" target=\"_blank\" rel=\"external\">goroutines</a>。Go 语言是 Google 的人设计的，并且在设计之初就把支持并发作为第一要务，而不是像 Python 的各种解决方案那样是事后才加上去的。因此我们开始着手把 Python 换成 Go 语言。</p>\n<p>虽然 Go 代码还不算正式上线的产品，但是结果非常令人鼓舞。我们现在能做到每秒处理一千份文档，使用更少的内存，还不用调试你在 Python 里遇到的：丑陋的多进程/gevent/“为什么 Control-C 杀不了进程”这些问题。</p>\n<h2 id=\"为什么我们喜欢_Go_语言\">为什么我们喜欢 Go 语言</h2>\n<p>任何人，对编程语言是如何工作（解释型 vs 编译型， 动态语言 vs 静态语言）有一点理解的话，会说，“切，当然 Go 语言会更快”。是的，我们也可以用 Java 把所有的东西重写一遍，也能看到类似更快的改善，但那不是 Go 语言胜出的原因。你用 Go 写的代码好像就是对的。我搞不清楚到底是怎么回事，但是一旦代码被编译了（编译速度很快），你就会觉得这代码能工作（不只是跑起来不会错，而且甚至逻辑上也是对的）。我知道，这听上去不太靠谱，但是确实如此。这和 Python 在冗余（或非冗余）方面非常类似，它把函数作为第一目标，因此函数编程会很容易想明白。而且当然，go 线程和通道让你的生活更容易，你可以得到静态类型带来的性能大提升，还能更精细的控制内存分配，而你却不必为此在语言表达力上付出太多的代价。</p>\n<h2 id=\"早知道就好了的事情\">早知道就好了的事情</h2>\n<p>除去所有这些赞美之词以后，有时你真的需要在处理 Go 代码的时候，相对于 Python，改变一下思维方式。因此这是我在迁移代码时记录的笔记清单 —— 只是在我把 Python 代码转换到 Go 时从我脑子里随机冒出来的点子：</p>\n<ul>\n<li>没有内建的集合类型（必须使用map，并检查是否存在）</li>\n<li>因为没有集合，必须自己写交集，并集之类的方法</li>\n<li>没有 tuples 类型，必须写你自己的结构，或者使用 slices （即数组）</li>\n<li>没有类似 _<em>getattr_</em>() 的方法，你必须总是检查存在性，而不是设置默认值，例如，在 Python 里，你可以这样写 value = dict.get(“a_key”, “default_value”)</li>\n<li>必须总是检查错误（或者显式的忽略错误）</li>\n<li>不能有变量/包没被使用，因此简单的测试也需要有时注掉一些代码</li>\n<li>在 [] byte 和 string 之间转换。 regexp 使用 [] byte （不可变）。这是对的，但是老把一些变量转换来转换去很烦人</li>\n<li>Python 更宽松。你可以使用超出范围的索引在字符串里取一个片段，而且不会出错。你还可以用负数取出片段，但是 Go 不行</li>\n<li>你不能混合数据结构类型。也许这样也不太干净，但是有时在 Python 里，我会使用值是混合了字符串和列表的字典。但是 Go 不行，你不得不清理干净你的数据结构或者使用自定义的结构</li>\n<li>不能解包一个 tuple 或者 list 到几个不同的变量（例如：x, y, z = [1, 2, 3]）</li>\n<li>驼峰式命名风格（如果你没有首字大写方法名/结构名，他们不会被暴露给其它的包）。我更喜欢 Python 的小写字母加下划线命名风格。</li>\n<li>必须显式检查是否有错误 != nil, 不像在 Python 里，许多类型可以像 bool 那样检查 （0, “”, None 都可以被解释成 “非” 集合）</li>\n<li>文档在一些模块上太散乱了，例如（crypto/md5），但是 IRC 上的 go-nuts 很好用，提供了巨大的帮助。</li>\n<li>从数字到字符串的转换（int64 -&gt; string） 和 []byte -&gt; string （只要使用 string([]byte)）不太一样。需要使用 strconv。</li>\n<li>阅读 Go 代码比起 Python 那样写起来如伪代码的语言更像一门编程语言， Go 有更多的非字母数字字符，并且使用 || 和 &amp;&amp;， 而不是 “or”和“and”</li>\n<li>写一个文件的话，有 File.Write([]byte) 和 File.WriteString(string)， 这点和 Python 开发者的 Python 之道：“解决问题就一种方法 ”相违背。</li>\n<li>修改字符串很困难，必须经常重排 fmt.Sprintf</li>\n<li>没有构造函数，因此惯用法是创建 NewType() 方法来返回你要的结构</li>\n<li>Else （或者 else if）必须正确格式化，else 得和 if 配对的大括号在同一行。奇怪。</li>\n<li>赋值运算符取决于在函数内还是函数外，例如，= 和 :=</li>\n<li>如果我只想要“键”或者只想要 “值”，譬如： dict.keys() 或者 dict.values()，或者一个 tuples 的列表，例如：dict.items()，在 Go 语言里没有等价的东西，你只能自己枚举 map 来构造你的列表类型</li>\n<li>我有时使用一种习惯用法：构造一个值是函数的字典类型，我想通过给定的键值调用这些函数，你在 Go 里可以做到，但是所有的函数必须接受，返回相同的东西，例如：相同的方法签名</li>\n<li>如果你使用 JSON 并且 你的 JSON 是一个复合类型，恭喜你。 你必须构造自定义的结构匹配 JSON 块里的格式，然后把原始 JSON 解析到你自定义结构的实例中去。比起 Python 世界里 object = json.loads(json_blob) 要做更多的工作</li>\n</ul>\n<h2 id=\"是不是值得？\">是不是值得？</h2>\n<p>值得，一百万个值得。速度的提升太多了以致很难舍弃。同时，我认为， Go 目前是趋势所在，因此在招新员工的时候，我认为把 Go 当作 Repustate 技术积累的重要一环会很有帮助。</p>\n","source":"md/python_to_go.markdown","raw":"# Python 开发者在迁徙到 Go 语言之前需要了解什么？\n\n这是一篇（长）博文， 介绍了我们在 Repustate 迁移大量 Python/Cython 代码到 Go 语言的经验。如果你想了解整个故事，背景和所有的事情，请继续往下读。如果你只是想了解 Python 开发者在一头扎进 Go 语言前需要了解什么，请点击一下链接：\n\n[Tips & tricks in migrating from Python to Go.](http://blog.repustate.com/migrating-code-from-python-to-golang-what-you-need-to-know/2013/04/23/#tips)\n\n## 背景\n\n在 Repustate，我们完成过的最棒的技术成就之一是实现了阿拉伯语的情感分析。阿拉伯语是一块难啃的硬骨头，因为它的词形变化相当复杂。比起譬如英语，阿拉伯语的分词（将一个句子切分呈几个独立的单词）也更困难，因为阿拉伯语的单词本身还可能会包含空白字符（例如：“阿列夫”在一个单词里的位置）。这也谈不上是泄密，Repustate 使用支持向量机（SVM）来获取一个句子背后最有可能的含义，并在其中加上情感元素。 总体上来说，我们使用了 22 种模型（22 个 SVM） 并且在一篇文档中，每一个单词我们都会加以分析。因此如果你有一篇 500 字的文档，那么基于 SVM，会进行十万次的比较。\n\n## Python\n\nRepustate 几乎完全就是一个 Python 商店。我们使用 Django 来实现 API 和网站。因此（目前）为了保持代码一致，同时使用 Python 来实现阿拉伯语情感引擎是合情合理的。只是做原型和实现的话，Python 是很好的选择。它的表达能力很强悍，第三方类库等等也很好。如果你就是为了网页服务，Python 很完美。但是当你进行低级别的计算，大量依赖于哈希表（Python 里的字典类型）做比较的时候，一切都变慢了。我们每秒能处理大约两到三个阿拉伯文档，但是这太慢了。比较下来，我们的英语情感引擎每秒能处理大约五百份文档。\n\n## 瓶颈\n\n因此我们开启了 Python 分析器，开始调查是什么地方用了那么长时间。还记得我前面说过我们有 22 个 SVM 并且每个单词都需要经过处理吗？好吧，这些都是线性处理的不是并行的。所以我们的第一反应是把线性处理改成 map/reduce 那样的操作。简单来说：Python 不太适合用作 map/reduce。当你需要并发的时候，Python 算不上好用。在 2013 Python 大会上（译者：PyCon 2013），Guido 谈到了 Tulip，他的这个新项目正在弥补 Python 这方面的不足，不过得过段一段时间才能推出，但是如果已经有了更好用的东西，我们为什么还要等呢？\n\n## 选 Go 语言还是回家算了？\n\n我在Mozilla的朋友告诉我，Mozilla 内部正在将他们大量的基础日志架构切换到 Go 语言上，部分原因是因为强大的 [goroutines](http://golang.org/doc/effective_go.html#goroutines)。Go 语言是 Google 的人设计的，并且在设计之初就把支持并发作为第一要务，而不是像 Python 的各种解决方案那样是事后才加上去的。因此我们开始着手把 Python 换成 Go 语言。\n\n虽然 Go 代码还不算正式上线的产品，但是结果非常令人鼓舞。我们现在能做到每秒处理一千份文档，使用更少的内存，还不用调试你在 Python 里遇到的：丑陋的多进程/gevent/“为什么 Control-C 杀不了进程”这些问题。\n\n## 为什么我们喜欢 Go 语言\n\n任何人，对编程语言是如何工作（解释型 vs 编译型， 动态语言 vs 静态语言）有一点理解的话，会说，“切，当然 Go 语言会更快”。是的，我们也可以用 Java 把所有的东西重写一遍，也能看到类似更快的改善，但那不是 Go 语言胜出的原因。你用 Go 写的代码好像就是对的。我搞不清楚到底是怎么回事，但是一旦代码被编译了（编译速度很快），你就会觉得这代码能工作（不只是跑起来不会错，而且甚至逻辑上也是对的）。我知道，这听上去不太靠谱，但是确实如此。这和 Python 在冗余（或非冗余）方面非常类似，它把函数作为第一目标，因此函数编程会很容易想明白。而且当然，go 线程和通道让你的生活更容易，你可以得到静态类型带来的性能大提升，还能更精细的控制内存分配，而你却不必为此在语言表达力上付出太多的代价。\n\n## 早知道就好了的事情\n\n除去所有这些赞美之词以后，有时你真的需要在处理 Go 代码的时候，相对于 Python，改变一下思维方式。因此这是我在迁移代码时记录的笔记清单 —— 只是在我把 Python 代码转换到 Go 时从我脑子里随机冒出来的点子：\n\n* 没有内建的集合类型（必须使用map，并检查是否存在）\n* 因为没有集合，必须自己写交集，并集之类的方法\n* 没有 tuples 类型，必须写你自己的结构，或者使用 slices （即数组）\n* 没有类似 \\__getattr__() 的方法，你必须总是检查存在性，而不是设置默认值，例如，在 Python 里，你可以这样写 value = dict.get(\"a_key\", \"default_value\")\n* 必须总是检查错误（或者显式的忽略错误）\n* 不能有变量/包没被使用，因此简单的测试也需要有时注掉一些代码\n* 在 [] byte 和 string 之间转换。 regexp 使用 [] byte （不可变）。这是对的，但是老把一些变量转换来转换去很烦人\n* Python 更宽松。你可以使用超出范围的索引在字符串里取一个片段，而且不会出错。你还可以用负数取出片段，但是 Go 不行\n* 你不能混合数据结构类型。也许这样也不太干净，但是有时在 Python 里，我会使用值是混合了字符串和列表的字典。但是 Go 不行，你不得不清理干净你的数据结构或者使用自定义的结构\n* 不能解包一个 tuple 或者 list 到几个不同的变量（例如：x, y, z = [1, 2, 3]）\n* 驼峰式命名风格（如果你没有首字大写方法名/结构名，他们不会被暴露给其它的包）。我更喜欢 Python 的小写字母加下划线命名风格。\n* 必须显式检查是否有错误 != nil, 不像在 Python 里，许多类型可以像 bool 那样检查 （0, \"\", None 都可以被解释成 “非” 集合）\n* 文档在一些模块上太散乱了，例如（crypto/md5），但是 IRC 上的 go-nuts 很好用，提供了巨大的帮助。\n* 从数字到字符串的转换（int64 -> string） 和 []byte -> string （只要使用 string([]byte)）不太一样。需要使用 strconv。\n* 阅读 Go 代码比起 Python 那样写起来如伪代码的语言更像一门编程语言， Go 有更多的非字母数字字符，并且使用 || 和 &&， 而不是 “or”和“and”\n* 写一个文件的话，有 File.Write([]byte) 和 File.WriteString(string)， 这点和 Python 开发者的 Python 之道：“解决问题就一种方法 ”相违背。\n* 修改字符串很困难，必须经常重排 fmt.Sprintf\n* 没有构造函数，因此惯用法是创建 NewType() 方法来返回你要的结构\n* Else （或者 else if）必须正确格式化，else 得和 if 配对的大括号在同一行。奇怪。\n* 赋值运算符取决于在函数内还是函数外，例如，= 和 :=\n* 如果我只想要“键”或者只想要 “值”，譬如： dict.keys() 或者 dict.values()，或者一个 tuples 的列表，例如：dict.items()，在 Go 语言里没有等价的东西，你只能自己枚举 map 来构造你的列表类型\n* 我有时使用一种习惯用法：构造一个值是函数的字典类型，我想通过给定的键值调用这些函数，你在 Go 里可以做到，但是所有的函数必须接受，返回相同的东西，例如：相同的方法签名\n* 如果你使用 JSON 并且 你的 JSON 是一个复合类型，恭喜你。 你必须构造自定义的结构匹配 JSON 块里的格式，然后把原始 JSON 解析到你自定义结构的实例中去。比起 Python 世界里 object = json.loads(json_blob) 要做更多的工作\n\n## 是不是值得？\n\n值得，一百万个值得。速度的提升太多了以致很难舍弃。同时，我认为， Go 目前是趋势所在，因此在招新员工的时候，我认为把 Go 当作 Repustate 技术积累的重要一环会很有帮助。\n\n","date":1408957428000,"updated":1380973054000,"path":"md/python_to_go.html","excerpt":"","_id":"n23cut9cq01ftz66","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"How_does_Python_benefit_the_Java_based_StubHub_?\">How does Python benefit the Java based StubHub ?</h1>\n<p>Since 2006, Python has been pretty popular, you could see more and more startup companies choose Python as the primary language when they start their business, for example:</p>\n<p><strong>Netflix</strong> - TV Shows &amp; Movies online company<br><strong>Dropbox</strong> - The most popular file synchronization and sharing tool<br><strong>YouTube</strong> - Sharing videos online<br><strong>Disqus</strong> - Online discussion and commenting service<br><strong>OpenStack</strong> - An all-open-source, all-Python infrastructure for building public and private clouds</p>\n<p>While the startup companies get more and more benefits from this elegant and neat language as the infrastructure to support their fast growing business, I’m thinking how we, StuhbHub - a Java ecosystem based company could benefit from it either, to save working hours and enhance the productivity significantly, I will explain what and why is Python and show you the Python solutions in our daily work.</p>\n<h2 id=\"What_and_Why_is_Python_?\">What and Why is Python ?</h2>\n<p>Python is an interpreted, object-oriented dynamic language, and of cause like Java, it’s a cross-platform language as well. Compared with the traditional mainstream language like Java/C++, programmers adore it because of the reasons below:</p>\n<h3 id=\"1-_Python_is_a_versatile_language\">1. Python is a versatile language</h3>\n<p>As we know, every language has its own advantage or disadvantage, like People will write C++ codes for games on Windows operation system, but no one will build a website by writing C++. The good news is that you could leverage Python for almost any task such as: web application, GUI desktop application, Linux script or any other handy tools, and on the top of that, as “glue language” you could even invoke the other language like Java/C++ in your python code, that means your existing code base could be reused.</p>\n<h3 id=\"2-_Python_is_more_productive\">2. Python is more productive</h3>\n<p>General speaking, the distinct difference when we talking about Python and Java is that as the dynamic language, there is no compilation step necessary. Under this hood, that means “productivity”.</p>\n<p>Remember how we verify a modification in Java code ? Especially in StubHub, we own a extremely large code base. </p>\n<ol>\n<li>Modify your Java code. (1 min)</li>\n<li>ant/maven to compile your Java code to byte code. (5 mins)</li>\n<li>Restart JBoss/Tomcat to deploy your application. (5 mins)</li>\n<li>Open your browser and see the changes.</li>\n</ol>\n<p>Here is the pain point: suppose you have a bug fix takes you 1 minute, but you have to wait at least 10 minutes to see the changes in your browser, the worse is that the fix is not working, therefore, another 10 minutes just for build/deploy is awaiting for you.</p>\n<p>While you are working with Python, it’s pretty easier.</p>\n<ol>\n<li>Modify your Python code. (1 min)</li>\n<li>F5 to refresh your browser to see the changes.</li>\n</ol>\n<p><strong>Congrats! You are saving 10 minutes for each iteration on your code change</strong>.</p>\n<p>Consider how many times in each day, each developer will have the code change and how many developers in a large organization like StubHub, you could calculate how many working hours you could save in all. That is huge and more than your imagine.</p>\n<h3 id=\"3-_Python_is_elegant,_neat_and_compact\">3. Python is elegant, neat and compact</h3>\n<p>And there is another major advantage. The syntax of Python is pretty cool, I had a chance to implement the same function with both Python and Java twice, it takes me only 50% code line to do the same thing by Python compared with Java. Base on this, that’s why people like to write pseudo code to verify ideas or implement a rapid prototype by writing Python code. It’s quicker to let you know whether your ideas or prototypes are doable or viable, and after that, you could then rewrite your codes in Java for production. That is better than, from the very beginning, you start codes with Java but find out your prototype is not viable.</p>\n<h2 id=\"Python_Stories_In_StubHub\">Python Stories In StubHub</h2>\n<p>StubHub go with the technical route like below:</p>\n<p>Generation 1: coldfusion<br>Generation 2: Java, flow based framework.<br>Generation 3: Java, Tapestry + Spring + Hibernate, all kinds of modern technical framework.</p>\n<p>You could see the whole technical ecosystem thrives based on Java. Sometimes it’s impossible as the engineer you could convince the team or architects to discard all the existing code base or convert the underneath fundamentals from Java to another one, but still, there is some room you could get things done better and quicker, let me show you the stories from my personal working scenarios in StubHub.</p>\n<h3 id=\"Story_1:_Handle_the_Java_source_codes_by_Python\">Story 1: Handle the Java source codes by Python</h3>\n<p>In 2011, StubHub Tech Team kicked off a one-week activity named <strong>fixit</strong>, the activity required all the developers try to write as many as possible test cases for existing codes to enhance the overall test coverage within one week. But before that, we need to mark some test cases as “broken” first, because if there is any test case failed, the analysis tool can’t produce the coverage report.</p>\n<p>The point is that it’s easy to mark the test cases as “broken”: just add @Test annotations with broken attribute like below:</p>\n<p>From</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeTest</span> </span>{</div><div class=\"line\">...</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>To</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"annotation\">@Test</span>(groups = {<span class=\"string\">\"broken\"</span>})</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeTest</span> </span>{</div><div class=\"line\">...</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>But there are hundreds of test cases source codes in StubHub code base.  That means you have to find them all first, check one case out from repository, modify the source code, check in back the changes and then repeat the steps for the next case until hundreds of cases have been handled.</p>\n<p>This is boring. And I think it’s Python could handle file operations repeatedly well not me. Thus I have the Python code snippet below to handle it automatically:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(path_name)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(<span class=\"string\">'src/'</span> + path_name):</div><div class=\"line\">        <span class=\"keyword\">if</span> files:</div><div class=\"line\">            <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</div><div class=\"line\">                filename = root + <span class=\"string\">'/'</span> + file</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'filename: '</span> + filename</div><div class=\"line\">                os.system(<span class=\"string\">'p4 edit //depot/project/pb_fixit_2011/gen31/test/'</span> + filename)</div><div class=\"line\">                <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'r+'</span>) <span class=\"keyword\">as</span> javafile:</div><div class=\"line\">                    fileContent = javafile.read()</div><div class=\"line\">                    matcher = re.search(<span class=\"string\">r'@Test([\\w\\W]*?)public class'</span>, fileContent)</div><div class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matcher:</div><div class=\"line\">                        fileContent = re.sub(<span class=\"string\">r'public class'</span>, <span class=\"string\">'@Test(groups = {\"broken\"} )\\npublic class'</span>,  fileContent)</div><div class=\"line\">                        javafile.seek(<span class=\"number\">0</span>) <span class=\"comment\"># return to 0 file position</span></div><div class=\"line\">                        javafile.write(fileContent)</div></pre></td></tr></table></figure>\n\n<p>Just 14 lines, the codes walk through the given path and check out files from Perforce by <code>p4 edit ...</code>, read file content from Java source file, use the regular expression to mark the test case as broken and then write back the changes to the source file. I suppose this script saved me one day work.</p>\n<h3 id=\"Story_2:_Testing_on_3rd_party_API\">Story 2: Testing on 3rd party API</h3>\n<p>In 2012, I joined a project named Gift Card, there is a 3rd party technical partner named Black Hawk who provides the redeem/reversal money Web Service APIs. At the very beginning of this project, they want to make sure the API calls from StubHub testing server is accessible to Black Hawk server. Since it’s just a verification, it’s not that serious to write down the formal, exception-well-handled Java codes, deploy the codes to somewhere we have the JRE installed and HttpClient libs there as the prerequisites and then begin to test APIs (By the way, Python is pre-installed for almost all the Linux distributions as the fundamental). When I think it’s not formal codes in the future it could be reused or maintained by others, Here is what Python could do for the same thing:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> httplib2 <span class=\"keyword\">import</span> Http</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_bh</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        http = Http()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Post request parameters</span></div><div class=\"line\">        body = <span class=\"string\">\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; </span></div><div class=\"line\">            &lt;bhnums:request </div><div class=\"line\">            ......</div><div class=\"line\">            &lt;/bhnums:request&gt; </div><div class=\"line\">        \"\"\"</div><div class=\"line\">        headers = {<span class=\"string\">'Content-type'</span>: <span class=\"string\">'text/xml;charset=UTF-8'</span>}</div><div class=\"line\"></div><div class=\"line\">        response, content = http.request(url, <span class=\"string\">\"POST\"</span>, headers=headers, body=body)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Expected post response</span></div><div class=\"line\">        <span class=\"keyword\">print</span> content</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception, e:</div><div class=\"line\">        <span class=\"keyword\">print</span> e</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'fail to call black hawk.'</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'success to call black hawk.'</span></div></pre></td></tr></table></figure>\n\n<p>Calling the service via Python is joyful. Although at first, it failed, But since the code is pretty short and readable, I just copied the Python snippet to the email and asked the 3rd party guys: “Is there anything wrong”? They replied me with some correction in the http request body, then I edited the codes on our testing server, tried again, it worked. There is no JRE/IDE/compilation/build/deployment here, just ssh to your Linux server, edit your codes with vi/emacs editor and <strong>Run !</strong>.</p>\n<h3 id=\"Story_3:_Resend_Rewards_Emails_to_customers\">Story 3: Resend Rewards Emails to customers</h3>\n<p>In 2012, there was another project named Rewards which would give our users some discounts if they engaged this campaign. And when they engaged it, they would be supposed to receive a mail about the details of this campaign. Unfortunately, because of the environment issue, there were 1285 users fail to receive this mail so that they may not know how to get discounts, although they had already joined Rewards campaign. Thus, I was required to resend the mails to make up for this issue.</p>\n<p>The task was emergent and valuable for the user if we could resend the mails as soon as possible. But if we go with the traditional Java codes, we need to have the SQLs to pick up the missing users from database first, invoke this SQL by JDBC or Hibernate, write down codes for resending email and figure out somewhere to build/deploy codes in production, and then roll back the deployment, since it’s supposed to be used once. That is ugly and I could imagine, it at least takes us 2 days for development and deployment.</p>\n<p>While choosing Python, the thing is easier. It’s still some kind of script running on Linux server. To avoid reading database, I could pick up the user id from database first and write them into the script as the list like this.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">users = [<span class=\"number\">556483</span>, <span class=\"number\">556480</span>, <span class=\"number\">556477</span>, <span class=\"number\">556379</span>, <span class=\"number\">556378</span>, <span class=\"number\">556471</span>, <span class=\"number\">556374</span>, <span class=\"number\">469686</span>, <span class=\"number\">556369</span>, <span class=\"number\">556466</span>, <span class=\"number\">556365</span>, <span class=\"number\">556364</span>, <span class=\"number\">556462</span>, <span class=\"number\">556460</span>, <span class=\"number\">556362</span>, <span class=\"number\">556360</span>, <span class=\"number\">556456</span>, ...]</div></pre></td></tr></table></figure>\n\n<p>It looks like 1285 user ids is a large amount,  but still it’s acceptable they are all in a python list as the part of script, then let’s resend mail to the users:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendmail_to_all</span><span class=\"params\">(users, url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">        sendmail(user, url)</div></pre></td></tr></table></figure>\n\n<p>At last, just one night, I guess all our users got their missing rewards mails.</p>\n<h3 id=\"Story_4:_Recommendation_Prototype\">Story 4: Recommendation Prototype</h3>\n<p>In 2010, one of my colleagues, who is a master at Mathematics, proposed a recommendation algorithm for StubHub, basically, the idea is that when the user is browsing the genre/event information on Stubhub, the system will guess what’s the most interested genres/events the user maybe purchase as well. I think the chances are we need Python once again to build a rapid application and see whether his recommendation algorithm works or not.</p>\n<p>So I took 15 minutes to discuss algorithm with him and try to understand the underneath magic rules, I was crystal after 15 minutes and started coding with Python.</p>\n<p>First, I just want to make the prototype work for verifying algorithm, I’m not going to go with Java to do some server side changes, data modal changes, that’s more like a formal project to me not a prototype. Thus, I think I could have a GUI desktop application with the built-in browser, people could operate the built-in browser and recommended information could be displayed on GUI application instead of browser, so that we avoid server side changes. Fortunately, It’s not difficult for Python to build a GUI app.</p>\n<p>Second, I need to process the historical order info from database to calculate the data, and then apply the algorithm. As you might know, Python is good at processing data as well.</p>\n<p>Finally, two days later, with the unrelenting coding with Python, I derived a coarse prototype like below:</p>\n<p>The left side of the GUI app is a built-in browser which is rendering the events of Los Angeles Lakes, and the right side of the GUI app is the recommended events which people may be interested based on the current event in the built-in browser. The top event of the recommended events is the match between 76ers and Lakers in 2010, guess you could tell me whether this make sense or not to NBA fans. :)</p>\n<p><img src=\"https://lh6.googleusercontent.com/-adGChNMTZxM/UcuRJzYDQrI/AAAAAAAAAOU/iotr53MsUPE/s0/recomm_U.jpg\" alt=\"recommendation-screenshot\" title=\"recomm_U.jpg\"></p>\n<p>Let’s just suppose the result is not that ideal, but at least within two days, we have the chance to know whether the algorithm is viable or not. This is even more important than we derive a good algorithm by Java within two weeks. The quicker you prove you are wrong, the quicker you could sift through a better algorithm. That’s the point. What if your Java prototype fails? Instead of two days, you lost two weeks, the cost is expensive.</p>\n<h2 id=\"The_End_Of_The_Python_Stories\">The End Of The Python Stories</h2>\n<p>These are all my Python Stories in StubHub, maybe they are trivial but I believe the stories will go on continuously. The thing is that we are not talking about which one is better: Java or Python or C++, I don’t care, I know only the more I could arm myself, the more powerful I could be, to tackle with all kinds of scenarios and not only work hard but also work smart.</p>\n<p>This makes the life easier.</p>\n","source":"md/stubhub_blog.markdown","raw":"# How does Python benefit the Java based StubHub ?\n\nSince 2006, Python has been pretty popular, you could see more and more startup companies choose Python as the primary language when they start their business, for example:\n\n**Netflix** - TV Shows & Movies online company  \n**Dropbox** - The most popular file synchronization and sharing tool\n**YouTube** - Sharing videos online  \n**Disqus** - Online discussion and commenting service  \n**OpenStack** - An all-open-source, all-Python infrastructure for building public and private clouds\n\nWhile the startup companies get more and more benefits from this elegant and neat language as the infrastructure to support their fast growing business, I'm thinking how we, StuhbHub - a Java ecosystem based company could benefit from it either, to save working hours and enhance the productivity significantly, I will explain what and why is Python and show you the Python solutions in our daily work.\n\n## What and Why is Python ?\n\nPython is an interpreted, object-oriented dynamic language, and of cause like Java, it's a cross-platform language as well. Compared with the traditional mainstream language like Java/C++, programmers adore it because of the reasons below:\n\n### 1. Python is a versatile language\n\nAs we know, every language has its own advantage or disadvantage, like People will write C++ codes for games on Windows operation system, but no one will build a website by writing C++. The good news is that you could leverage Python for almost any task such as: web application, GUI desktop application, Linux script or any other handy tools, and on the top of that, as \"glue language\" you could even invoke the other language like Java/C++ in your python code, that means your existing code base could be reused.\n\n### 2. Python is more productive\n\nGeneral speaking, the distinct difference when we talking about Python and Java is that as the dynamic language, there is no compilation step necessary. Under this hood, that means \"productivity\".\n\nRemember how we verify a modification in Java code ? Especially in StubHub, we own a extremely large code base. \n\n1. Modify your Java code. (1 min)\n2. ant/maven to compile your Java code to byte code. (5 mins)\n3. Restart JBoss/Tomcat to deploy your application. (5 mins)\n4. Open your browser and see the changes.\n\nHere is the pain point: suppose you have a bug fix takes you 1 minute, but you have to wait at least 10 minutes to see the changes in your browser, the worse is that the fix is not working, therefore, another 10 minutes just for build/deploy is awaiting for you.\n\nWhile you are working with Python, it's pretty easier.\n\n1. Modify your Python code. (1 min)\n2. F5 to refresh your browser to see the changes.\n\n**Congrats! You are saving 10 minutes for each iteration on your code change**.\n\nConsider how many times in each day, each developer will have the code change and how many developers in a large organization like StubHub, you could calculate how many working hours you could save in all. That is huge and more than your imagine.\n\n### 3. Python is elegant, neat and compact\n\nAnd there is another major advantage. The syntax of Python is pretty cool, I had a chance to implement the same function with both Python and Java twice, it takes me only 50% code line to do the same thing by Python compared with Java. Base on this, that's why people like to write pseudo code to verify ideas or implement a rapid prototype by writing Python code. It's quicker to let you know whether your ideas or prototypes are doable or viable, and after that, you could then rewrite your codes in Java for production. That is better than, from the very beginning, you start codes with Java but find out your prototype is not viable.\n\n## Python Stories In StubHub\n\nStubHub go with the technical route like below:\n\nGeneration 1: coldfusion  \nGeneration 2: Java, flow based framework.  \nGeneration 3: Java, Tapestry + Spring + Hibernate, all kinds of modern technical framework.\n\nYou could see the whole technical ecosystem thrives based on Java. Sometimes it's impossible as the engineer you could convince the team or architects to discard all the existing code base or convert the underneath fundamentals from Java to another one, but still, there is some room you could get things done better and quicker, let me show you the stories from my personal working scenarios in StubHub.\n\n### Story 1: Handle the Java source codes by Python\n\nIn 2011, StubHub Tech Team kicked off a one-week activity named **fixit**, the activity required all the developers try to write as many as possible test cases for existing codes to enhance the overall test coverage within one week. But before that, we need to mark some test cases as \"broken\" first, because if there is any test case failed, the analysis tool can't produce the coverage report.\n\nThe point is that it's easy to mark the test cases as \"broken\": just add @Test annotations with broken attribute like below:\n\nFrom\n```java\npublic class SomeTest {\n...\n}\n```\nTo\n```java\n@Test(groups = {\"broken\"})\npublic class SomeTest {\n...\n}\n```\n\nBut there are hundreds of test cases source codes in StubHub code base.  That means you have to find them all first, check one case out from repository, modify the source code, check in back the changes and then repeat the steps for the next case until hundreds of cases have been handled.\n\nThis is boring. And I think it's Python could handle file operations repeatedly well not me. Thus I have the Python code snippet below to handle it automatically:\n\n```python\ndef start(path_name):\n    for root, dirs, files in os.walk('src/' + path_name):\n        if files:\n            for file in files:\n                filename = root + '/' + file\n                print 'filename: ' + filename\n                os.system('p4 edit //depot/project/pb_fixit_2011/gen31/test/' + filename)\n                with open(filename, 'r+') as javafile:\n                    fileContent = javafile.read()\n                    matcher = re.search(r'@Test([\\w\\W]*?)public class', fileContent)\n                    if not matcher:\n                        fileContent = re.sub(r'public class', '@Test(groups = {\"broken\"} )\\npublic class',  fileContent)\n                        javafile.seek(0) # return to 0 file position\n                        javafile.write(fileContent)\n```\nJust 14 lines, the codes walk through the given path and check out files from Perforce by `p4 edit ...`, read file content from Java source file, use the regular expression to mark the test case as broken and then write back the changes to the source file. I suppose this script saved me one day work.\n\n### Story 2: Testing on 3rd party API\n\nIn 2012, I joined a project named Gift Card, there is a 3rd party technical partner named Black Hawk who provides the redeem/reversal money Web Service APIs. At the very beginning of this project, they want to make sure the API calls from StubHub testing server is accessible to Black Hawk server. Since it's just a verification, it's not that serious to write down the formal, exception-well-handled Java codes, deploy the codes to somewhere we have the JRE installed and HttpClient libs there as the prerequisites and then begin to test APIs (By the way, Python is pre-installed for almost all the Linux distributions as the fundamental). When I think it's not formal codes in the future it could be reused or maintained by others, Here is what Python could do for the same thing:\n\n```python\nfrom httplib2 import Http\ndef call_bh(url):\n    try:\n        http = Http()\n\n        # Post request parameters\n        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n            <bhnums:request \n            ......\n            </bhnums:request> \n        \"\"\"\n        headers = {'Content-type': 'text/xml;charset=UTF-8'}\n\n        response, content = http.request(url, \"POST\", headers=headers, body=body)\n\n        # Expected post response\n        print content\n    except Exception, e:\n        print e\n        print 'fail to call black hawk.'\n    else:\n        print 'success to call black hawk.'\n```\nCalling the service via Python is joyful. Although at first, it failed, But since the code is pretty short and readable, I just copied the Python snippet to the email and asked the 3rd party guys: \"Is there anything wrong\"? They replied me with some correction in the http request body, then I edited the codes on our testing server, tried again, it worked. There is no JRE/IDE/compilation/build/deployment here, just ssh to your Linux server, edit your codes with vi/emacs editor and **Run !**.\n\n### Story 3: Resend Rewards Emails to customers\n\nIn 2012, there was another project named Rewards which would give our users some discounts if they engaged this campaign. And when they engaged it, they would be supposed to receive a mail about the details of this campaign. Unfortunately, because of the environment issue, there were 1285 users fail to receive this mail so that they may not know how to get discounts, although they had already joined Rewards campaign. Thus, I was required to resend the mails to make up for this issue.\n\nThe task was emergent and valuable for the user if we could resend the mails as soon as possible. But if we go with the traditional Java codes, we need to have the SQLs to pick up the missing users from database first, invoke this SQL by JDBC or Hibernate, write down codes for resending email and figure out somewhere to build/deploy codes in production, and then roll back the deployment, since it's supposed to be used once. That is ugly and I could imagine, it at least takes us 2 days for development and deployment.\n\nWhile choosing Python, the thing is easier. It's still some kind of script running on Linux server. To avoid reading database, I could pick up the user id from database first and write them into the script as the list like this.\n\n```python\nusers = [556483, 556480, 556477, 556379, 556378, 556471, 556374, 469686, 556369, 556466, 556365, 556364, 556462, 556460, 556362, 556360, 556456, ...]\n```\nIt looks like 1285 user ids is a large amount,  but still it's acceptable they are all in a python list as the part of script, then let's resend mail to the users:\n\n```python\ndef sendmail_to_all(users, url):\n    for user in users:\n        time.sleep(1)\n        sendmail(user, url)\n```\nAt last, just one night, I guess all our users got their missing rewards mails.\n\n### Story 4: Recommendation Prototype\n\nIn 2010, one of my colleagues, who is a master at Mathematics, proposed a recommendation algorithm for StubHub, basically, the idea is that when the user is browsing the genre/event information on Stubhub, the system will guess what's the most interested genres/events the user maybe purchase as well. I think the chances are we need Python once again to build a rapid application and see whether his recommendation algorithm works or not.\n\nSo I took 15 minutes to discuss algorithm with him and try to understand the underneath magic rules, I was crystal after 15 minutes and started coding with Python.\n\nFirst, I just want to make the prototype work for verifying algorithm, I'm not going to go with Java to do some server side changes, data modal changes, that's more like a formal project to me not a prototype. Thus, I think I could have a GUI desktop application with the built-in browser, people could operate the built-in browser and recommended information could be displayed on GUI application instead of browser, so that we avoid server side changes. Fortunately, It's not difficult for Python to build a GUI app.\n\nSecond, I need to process the historical order info from database to calculate the data, and then apply the algorithm. As you might know, Python is good at processing data as well.\n\nFinally, two days later, with the unrelenting coding with Python, I derived a coarse prototype like below:\n\nThe left side of the GUI app is a built-in browser which is rendering the events of Los Angeles Lakes, and the right side of the GUI app is the recommended events which people may be interested based on the current event in the built-in browser. The top event of the recommended events is the match between 76ers and Lakers in 2010, guess you could tell me whether this make sense or not to NBA fans. :)\n\n![recommendation-screenshot][1]\n\n\nLet's just suppose the result is not that ideal, but at least within two days, we have the chance to know whether the algorithm is viable or not. This is even more important than we derive a good algorithm by Java within two weeks. The quicker you prove you are wrong, the quicker you could sift through a better algorithm. That's the point. What if your Java prototype fails? Instead of two days, you lost two weeks, the cost is expensive.\n\n\n## The End Of The Python Stories\n\nThese are all my Python Stories in StubHub, maybe they are trivial but I believe the stories will go on continuously. The thing is that we are not talking about which one is better: Java or Python or C++, I don't care, I know only the more I could arm myself, the more powerful I could be, to tackle with all kinds of scenarios and not only work hard but also work smart.\n\nThis makes the life easier.\n\n  [1]: https://lh6.googleusercontent.com/-adGChNMTZxM/UcuRJzYDQrI/AAAAAAAAAOU/iotr53MsUPE/s0/recomm_U.jpg \"recomm_U.jpg\"\n\n","date":1408957428000,"updated":1380973054000,"path":"md/stubhub_blog.html","excerpt":"","_id":"iglvhn3ex783sq8q","title":"","comments":true,"layout":"page"},{"content":"<!DOCTYPE html>\n\n<html>\n\n    <head>\n        <title>PageDown Demo Page</title>\n        \n        <link rel=\"stylesheet\" type=\"text/css\" href=\"demo.css\">\n        \n        <script type=\"text/javascript\" src=\"../../Markdown.Converter.js\"></script>\n        <script type=\"text/javascript\" src=\"../../Markdown.Sanitizer.js\"></script>\n        <script type=\"text/javascript\" src=\"../../Markdown.Editor.js\"></script>\n    </head>\n    \n    <body>\n        <div class=\"wmd-panel\">\n            <div id=\"wmd-button-bar\"></div>\n            <textarea class=\"wmd-input\" id=\"wmd-input\">\nThis is the *first* editor.\n------------------------------\n\nJust plain **Markdown**, except that the input is sanitized:\n\n<marquee>I'm the ghost from the past!</marquee>\n\nand that it implements \"fenced blockquotes\" via a plugin:\n\n\"\"\"\nDo it like this:\n\n1. Have idea.\n2. ???\n3. Profit!\n\"\"\"\n</textarea>\n        </div>\n        <div id=\"wmd-preview\" class=\"wmd-panel wmd-preview\"></div>\n        \n        <br> <br>\n        \n        <div class=\"wmd-panel\">\n            <div id=\"wmd-button-bar-second\"></div>\n            <textarea class=\"wmd-input\" id=\"wmd-input-second\">\nThis is the *second* editor.\n------------------------------\n\nIt has a plugin hook registered that surrounds all words starting with the\nletter A with asterisks before doing the Markdown conversion. Another one gives bare links\na nicer link text. User input isn't sanitized here:\n\n<marquee>I'm the ghost from the past!</marquee>\n\nhttp://google.com\n\nhttp://stackoverflow.com\n\nIt also includes a help button.\n\nFinally, note that when you press Ctrl-Q or click the \"Blockquote\" button (without having a\nselection), this editor creates an example text that's different from the first editor.\n</textarea>\n        </div>\n        <div id=\"wmd-preview-second\" class=\"wmd-panel wmd-preview\"></div>\n\n\n        <script type=\"text/javascript\">\n            (function () {\n                var converter1 = Markdown.getSanitizingConverter();\n                \n                converter1.hooks.chain(\"preBlockGamut\", function (text, rbg) {\n                    return text.replace(/^ {0,3}\"\"\" *\\n((?:.*?\\n)+?) {0,3}\"\"\" *$/gm, function (whole, inner) {\n                        return \"<blockquote>\" + rbg(inner) + \"</blockquote>\\n\";\n                    });\n                });\n                \n                var editor1 = new Markdown.Editor(converter1);\n                \n                editor1.run();\n                \n                var converter2 = new Markdown.Converter();\n\n                converter2.hooks.chain(\"preConversion\", function (text) {\n                    return text.replace(/\\b(a\\w*)/gi, \"*$1*\");\n                });\n\n                converter2.hooks.chain(\"plainLinkText\", function (url) {\n                    return \"This is a link to \" + url.replace(/^https?:\\/\\//, \"\");\n                });\n                \n                var help = function () { alert(\"Do you need help?\"); }\n                var options = {\n                    helpButton: { handler: help },\n                    strings: { quoteexample: \"whatever you're quoting, put it right here\" }\n                };\n                var editor2 = new Markdown.Editor(converter2, \"-second\", options);\n                \n                editor2.run();\n            })();\n        </script>\n    </body>\n</html>\n","source":"md/static/editor/pagedown/demo/browser/demo.html","raw":"<!DOCTYPE html>\n\n<html>\n\n    <head>\n        <title>PageDown Demo Page</title>\n        \n        <link rel=\"stylesheet\" type=\"text/css\" href=\"demo.css\" />\n        \n        <script type=\"text/javascript\" src=\"../../Markdown.Converter.js\"></script>\n        <script type=\"text/javascript\" src=\"../../Markdown.Sanitizer.js\"></script>\n        <script type=\"text/javascript\" src=\"../../Markdown.Editor.js\"></script>\n    </head>\n    \n    <body>\n        <div class=\"wmd-panel\">\n            <div id=\"wmd-button-bar\"></div>\n            <textarea class=\"wmd-input\" id=\"wmd-input\">\nThis is the *first* editor.\n------------------------------\n\nJust plain **Markdown**, except that the input is sanitized:\n\n<marquee>I'm the ghost from the past!</marquee>\n\nand that it implements \"fenced blockquotes\" via a plugin:\n\n\"\"\"\nDo it like this:\n\n1. Have idea.\n2. ???\n3. Profit!\n\"\"\"\n</textarea>\n        </div>\n        <div id=\"wmd-preview\" class=\"wmd-panel wmd-preview\"></div>\n        \n        <br /> <br />\n        \n        <div class=\"wmd-panel\">\n            <div id=\"wmd-button-bar-second\"></div>\n            <textarea class=\"wmd-input\" id=\"wmd-input-second\">\nThis is the *second* editor.\n------------------------------\n\nIt has a plugin hook registered that surrounds all words starting with the\nletter A with asterisks before doing the Markdown conversion. Another one gives bare links\na nicer link text. User input isn't sanitized here:\n\n<marquee>I'm the ghost from the past!</marquee>\n\nhttp://google.com\n\nhttp://stackoverflow.com\n\nIt also includes a help button.\n\nFinally, note that when you press Ctrl-Q or click the \"Blockquote\" button (without having a\nselection), this editor creates an example text that's different from the first editor.\n</textarea>\n        </div>\n        <div id=\"wmd-preview-second\" class=\"wmd-panel wmd-preview\"></div>\n\n\n        <script type=\"text/javascript\">\n            (function () {\n                var converter1 = Markdown.getSanitizingConverter();\n                \n                converter1.hooks.chain(\"preBlockGamut\", function (text, rbg) {\n                    return text.replace(/^ {0,3}\"\"\" *\\n((?:.*?\\n)+?) {0,3}\"\"\" *$/gm, function (whole, inner) {\n                        return \"<blockquote>\" + rbg(inner) + \"</blockquote>\\n\";\n                    });\n                });\n                \n                var editor1 = new Markdown.Editor(converter1);\n                \n                editor1.run();\n                \n                var converter2 = new Markdown.Converter();\n\n                converter2.hooks.chain(\"preConversion\", function (text) {\n                    return text.replace(/\\b(a\\w*)/gi, \"*$1*\");\n                });\n\n                converter2.hooks.chain(\"plainLinkText\", function (url) {\n                    return \"This is a link to \" + url.replace(/^https?:\\/\\//, \"\");\n                });\n                \n                var help = function () { alert(\"Do you need help?\"); }\n                var options = {\n                    helpButton: { handler: help },\n                    strings: { quoteexample: \"whatever you're quoting, put it right here\" }\n                };\n                var editor2 = new Markdown.Editor(converter2, \"-second\", options);\n                \n                editor2.run();\n            })();\n        </script>\n    </body>\n</html>\n","date":1408957428000,"updated":1380973054000,"path":"md/static/editor/pagedown/demo/browser/demo.html","excerpt":"","_id":"zcovwmqr96sj7j0p","title":"","comments":true,"layout":"page"}],"Post":[{"title":"Migrate to Hexo","content":"<h1 id=\"博客正式遷移到Hexo\">博客正式遷移到Hexo</h1>\n<h2 id=\"緣起\">緣起</h2>\n<ul>\n<li><p>徘徊于WordPress  迷茫于VPS</p>\n</li>\n<li><p>糾結選哪個blog framework安家 </p>\n</li>\n<li><p>猛然發現平台真的不重要 折騰的心應該focus于內容</p>\n</li>\n<li><p>希望得到舒適恬靜描描畫畫feelings （而不是臃腫擔心的後台admin）</p>\n</li>\n</ul>\n<h2 id=\"目標\">目標</h2>\n<ul>\n<li>簡潔優美的書寫環境</li>\n<li>輕鬆快捷的發佈服務端</li>\n<li>意外極端情況的應急修復能力</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"擼起褲腿_思路+實現\">擼起褲腿 思路+實現</h2>\n<pre><code>本地測試環境 \n(現有)OS:win7 64bit  text編輯器：notepad++\n(即將搭建)\n[<span class=\"link_label\">git</span>](<span class=\"link_url\">http://git-scm.com/ </span>) \n[<span class=\"link_label\">node.js npm</span>](<span class=\"link_url\">https://www.npmjs.org/</span>)\n[<span class=\"link_label\">hexo 基於node.js靜態博客生成處理工具</span>](<span class=\"link_url\">http://hexo.io/</span>)\n\n遠程服務端環境\n支持靜態化html解析的Github Pages\n</code></pre><h2 id=\"本地_local_environment_setup\">本地 local environment setup</h2>\n<p>1.win平台安裝git <a href=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">官方地址 下載安裝即可</a></p>\n<p>2.本地安裝node.js <a href=\"http://nodejs.org/dist/v0.10.27/x64/node-v0.10.27-x64.msi\" target=\"_blank\" rel=\"external\">node-v0.10.27-x64(選合適的版本)</a></p>\n<p>3.安裝hexo <code>$ npm install hexo -g</code> 非常簡潔</p>\n<p> <strong>至此，本地配置完成，搭好高樓大廈的骨架，要準備充實內容啦~</strong></p>\n<h2 id=\"服務端_remote_environment_setup\">服務端 remote environment setup</h2>\n<p>4.開通github賬號 <a href=\"http://github.com\" target=\"_blank\" rel=\"external\">官方註冊</a></p>\n<p>5.新建repo 以xxxx.github.io命名的repository  <strong>建立pages的重要關鍵</strong></p>\n<p> 至此，可以用<a href=\"https://github.com/xxxx/xxxx.github.io\" target=\"_blank\" rel=\"external\">https://github.com/xxxx/xxxx.github.io</a> 訪問到新建的repo</p>\n<p>（換言之確保 git clone <a href=\"https://github.com/xxxx/xxxx.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/xxxx/xxxx.github.io.git</a> 可以正常）</p>\n<p>6.打開剛剛的repo主頁，點擊項目的setting(URI直接進入)<a href=\"https://github.com/xxxx/xxxx.github.io/settings\" target=\"_blank\" rel=\"external\">https://github.com/xxxx/xxxx.github.io/settings</a> 點擊Github Pages自動生成默認的頁面</p>\n<p><strong>至此可以通過xxxx.github.io訪問默認頁面了</strong>（首次生效可能需要10min）</p>\n<p><strong>切換回本地操作</strong></p>\n<h2 id=\"0-利用ssh方式使用git\">0.<strong>利用ssh方式使用git</strong></h2>\n<ul>\n<li><p>每次輸入賬號密碼簡直反人類</p>\n</li>\n<li><p>利用ssh更安全快捷</p>\n</li>\n<li><p>原理：客戶端生成的public key反饋回服務端得到認證 以後server-client通信就利用key匹配</p>\n</li>\n<li><p>媽媽再也不用擔心我輸入密碼啦~</p>\n</li>\n</ul>\n<p>進入Git Bash命令行 輸入</p>\n<pre><code>git config --global <span class=\"literal\">user</span>.email <span class=\"string\">\"your@email.com\"</span>\ngit config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"yourname\"</span>\n</code></pre><p>這兩步是設定客戶端的全局名稱和郵件信息（僅僅是標識作用 郵箱用戶名隨便填）</p>\n<p><strong>生成秘鑰</strong></p>\n<pre><code>ssh-keygen -t rsa -<span class=\"keyword\">C</span> <span class=\"string\">\"your@email.com\"</span>\n</code></pre><p>一路按 Enter 確認 最後得到秘鑰</p>\n<pre><code><span class=\"tag\">Your</span> <span class=\"tag\">identification</span> <span class=\"tag\">has</span> <span class=\"tag\">been</span> <span class=\"tag\">saved</span> <span class=\"tag\">in</span> <span class=\"tag\">x</span>:\\<span class=\"tag\">x</span>\\<span class=\"class\">.ssh</span>\\<span class=\"tag\">id_rsa</span>\n<span class=\"tag\">Your</span> <span class=\"tag\">public</span> <span class=\"tag\">key</span> <span class=\"tag\">has</span> <span class=\"tag\">been</span> <span class=\"tag\">saved</span> <span class=\"tag\">in</span> <span class=\"tag\">x</span>:\\<span class=\"tag\">x</span>\\<span class=\"class\">.ssh</span>\\<span class=\"tag\">id_rsa</span><span class=\"class\">.pub</span>\n<span class=\"tag\">The</span> <span class=\"tag\">key</span> <span class=\"tag\">fingerprint</span> <span class=\"tag\">is</span>:\n<span class=\"tag\">xx</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:ab</span><span class=\"pseudo\">:c1</span><span class=\"pseudo\">:50</span><span class=\"pseudo\">:10</span><span class=\"pseudo\">:40</span><span class=\"pseudo\">:0a</span><span class=\"pseudo\">:ba</span><span class=\"pseudo\">:c1</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:xx</span><span class=\"pseudo\">:xx</span> \n</code></pre><p>然後,用文本编辑器打开<strong>id_rsa.pub</strong>文件,拷贝其中的内容,将其添加到 <a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"external\">官方Github add ssh key </a></p>\n<p><strong>這一步目的是讓服務端認識客戶端 進行授權操作repo</strong>。</p>\n<p>最後 執行命令</p>\n<pre><code><span class=\"title\">ssh</span> -T git<span class=\"variable\">@github</span>.com\n</code></pre><p>提示已經授權代表成功 告別https密碼登陸啦啦啦 （忽視warning）</p>\n<h2 id=\"1-利用hexo初始化博客\"><strong>1.利用hexo初始化博客</strong></h2>\n<p>本地新建博客主目錄 例如blog</p>\n<pre><code>hexo init <span class=\"tag\">&lt;<span class=\"title\">folder</span>&gt;</span>\n</code></pre><p>完成<strong>主程序</strong>初始化 此時blog目錄應該create了很多文件 默認目錄結構</p>\n<pre><code>├── node_modules\n├── scaffolds\n├── scripts\n├── source\n<span class=\"string\">|   ├── _drafts</span>\n<span class=\"string\">|   └── _posts</span>\n├── themes\n├── _config.yml\n└── package.json\n</code></pre><p>根據程序默認配置 生成靜態博客文件</p>\n<pre><code>hexo <span class=\"keyword\">generate</span>\n</code></pre><p>此時，主目錄下多了個子目錄 <code>public</code> 裡面就是整個博客的所有的靜態文件。</p>\n<p>進行本地預覽調試 啟動本地服務器 默認4000端口</p>\n<pre><code>hexo <span class=\"keyword\">server</span>\n</code></pre><p>現在通過 <code>https://localhost:40000</code> 就可以看到剛剛生成的博客了</p>\n<p>但這<strong>僅僅</strong>是本地可以訪問 （我們必須把它發佈到服務器 看下文）</p>\n<h2 id=\"2-發佈博客到Github_Pages服務器\"><strong>2.發佈博客到Github Pages服務器</strong></h2>\n<pre><code> <span class=\"built_in\">cd</span>切換回博客的主目錄 前述的blog \n</code></pre><p><strong>思路</strong></p>\n<ul>\n<li><p>2.1先把遠程的repo clone到本地</p>\n</li>\n<li><p>2.2再刪除<strong>github默認的pages文件</strong></p>\n</li>\n<li><p>2.3上傳更新我們的新的博客靜態文件</p>\n</li>\n</ul>\n<p><strong>2.1  先把遠程的repo clone到本地</strong></p>\n<pre><code><span class=\"title\">git</span> clone git<span class=\"variable\">@github</span>.com:xxxx/xxxx.github.io.git\n</code></pre><p><strong>2.2 再刪除github默認的pages文件</strong></p>\n<pre><code>git rm -rf *\ngit <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">'delete origin pages files'</span>\ngit push origin <span class=\"keyword\">master</span></span>\n</code></pre><p>到這裡 已經把原來的pages文件刪除 清空完 可以放新文件上去了</p>\n<p><strong>2.3上傳更新我們的新的博客靜態文件</strong></p>\n<p>hexo原生支持發佈到Github的遠程服務端，因而只需修改全局配置文件<code>_config.yml</code> 就可以方便更新Github Pages了</p>\n<p>用notepad++打開<code>_config.yml</code> 修改</p>\n<pre><code><span class=\"preprocessor\"># Deployment</span>\n<span class=\"preprocessor\">## Docs: http://hexo.io/docs/deployment.html</span>\n<span class=\"title\">deploy</span>:\n  <span class=\"typedef\"><span class=\"keyword\">type</span>: github</span>\n  repo: git@github.com:xxxx/xxxx.github.io.git\n  branch: master\n</code></pre><p>更多<code>_config.yml</code> 修改 <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">看官方docs</a></p>\n<p>最後 執行 <code>hexo deploy -g</code> 就成功發佈到Github Pages了</p>\n<p><strong>驗證</strong></p>\n<p>通過能訪問 <a href=\"http://xxxx.github.io\" target=\"_blank\" rel=\"external\">xxxx.github.io</a> 即證明成功publish</p>\n<p><strong>恭喜你 到現在終於把基本博客的最基本完成啦~（碼字君好累啊）</strong></p>\n<h2 id=\"3-進階配置_advanced_settings\">3.進階配置 advanced settings</h2>\n<p><strong>3.1  hexo發佈過程全解析</strong>     </p>\n<p><strong>理順過程</strong></p>\n<ul>\n<li><p>1.hexo new ‘hello-world’ 本地編寫文章</p>\n</li>\n<li><p>2.hexo generate 生成靜態</p>\n</li>\n<li><p>3.hexo server 打開本地服務端 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 調試</p>\n</li>\n<li><p>4.hexo deploy 發佈到遠端服務器</p>\n</li>\n</ul>\n<p><strong>看清原理</strong>（對應上面過程來分析）</p>\n<ul>\n<li><p>1.hexo調用node.js生成.md文件 默認路徑<code>source\\_posts\\xx.md</code></p>\n</li>\n<li><p>2.hexo依據默認配置 生成靜態文件 默認生成在子目錄<code>public</code> 內</p>\n</li>\n<li><p>3.hexo利用web服務器開啟本地web服務</p>\n</li>\n<li><p>4.拷貝<code>public</code> 到<code>.deploy</code> 再執行git命令 讀取<code>_config.yml</code> 的deploy參數，<code>git add .</code> <code>git commit -m &#39;CommitMessage&#39;</code> <code>git push origin [branch]</code> </p>\n</li>\n</ul>\n<p><strong>升華小結下</strong>  </p>\n<p>1.直接在相應目錄建立文件,再deploy的效果和<code>hexo new new-post-article</code>一樣，<strong>eg.在<code>source\\_posts</code>下直接新建<code>xx.md</code>文件等效于<code>hexo n xx</code> (新建pages同理)</strong> </p>\n<p>2.<strong>手動執行<code>git add .</code> <code>git commit -m &#39;CommitMessage&#39;</code> <code>git push origin [branch]</code> 等效同理于<code>hexo deploy</code></strong> </p>\n<p>故此 以後熟悉后直接變成<strong>兩個步驟</strong></p>\n<pre><code>hexo <span class=\"keyword\">new</span> <span class=\"string\">'new-post-article'</span>\nhexo d -g \n</code></pre><p>稍等服務端就生效（最長10min）   </p>\n<p>hexo常用命令</p>\n<pre><code>hexo <span class=\"variable\">n =</span>= hexo new\nhexo <span class=\"variable\">g =</span>= hexo generate\nhexo <span class=\"variable\">s =</span>= hexo server\nhexo <span class=\"variable\">d =</span>= hexo deploy\n</code></pre><h2 id=\"3-2_博客站點個性化_sites_customization\">3.2 博客站點個性化 sites customization</h2>\n<p><strong>3.2.1 global settings</strong></p>\n<p>全局設置在博客主目錄下 （前例blog）的<code>_config.yml</code> 中<br>默認配置如下  更多查看<a href=\"http://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"external\">官方docs</a> 挺全面的<br>主要修改：站點簡介、固定鏈接、默認目錄、主題theme選擇、發佈deploy方式等。</p>\n<pre><code><span class=\"label\">title:</span> Hexo\n<span class=\"label\">subtitle:</span>\n<span class=\"label\">description:</span>\n<span class=\"label\">author:</span> John Doe\n<span class=\"label\">email:</span>\n<span class=\"label\">language:</span>\n<span class=\"label\">url:</span> http://yoursite.com\n<span class=\"label\">root:</span> /\n<span class=\"label\">permalink:</span> :year/:month/:day/:title/\n<span class=\"label\">tag_dir:</span> tags\n<span class=\"label\">archive_dir:</span> archives\n<span class=\"label\">category_dir:</span> categories\n<span class=\"label\">code_dir:</span> downloads/code\n<span class=\"label\">new_post_name:</span> :title.md\n<span class=\"label\">default_layout:</span> post\n<span class=\"label\">auto_spacing:</span> false\n<span class=\"label\">titlecase:</span> false\n<span class=\"label\">filename_case:</span> <span class=\"number\">0</span>\n<span class=\"label\">render_drafts:</span> false\n<span class=\"label\">post_asset_folder:</span> false\n<span class=\"label\">relative_link:</span> false\n<span class=\"label\">highlight:</span>\n  enable: true\n  line_number: true\n  tab_replace:\n<span class=\"label\">default_category:</span> uncategorized\n<span class=\"label\">category_map:</span>\n<span class=\"label\">tag_map:</span>\n<span class=\"label\">archive:</span> <span class=\"number\">2</span>\n<span class=\"label\">category:</span> <span class=\"number\">2</span>\n<span class=\"label\">tag:</span> <span class=\"number\">2</span>\n<span class=\"label\">port:</span> <span class=\"number\">4000</span>\n<span class=\"label\">logger:</span> false\n<span class=\"label\">logger_format:</span>\n<span class=\"label\">date_format:</span> MMM D YYYY\n<span class=\"label\">time_format:</span> H:mm:ss\n<span class=\"label\">per_page:</span> <span class=\"number\">10</span>\n<span class=\"label\">pagination_dir:</span> page\n<span class=\"label\">disqus_shortname:</span>\n<span class=\"label\">theme:</span> light\n<span class=\"label\">exclude_generator:</span>\n<span class=\"label\">deploy:</span>\n  type:\n</code></pre><p><strong>3.2.2 主題配色優化 theme customization</strong></p>\n<p> 主目錄下子目錄 <code>theme</code> 為主題文件夾所在,而 <a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">官方hexo theme wiki參考</a>  童靴們也可以自己寫add進去</p>\n<ul>\n<li><p>找到合適的 copy進來就好 git clone也行 whatever u like</p>\n</li>\n<li><p>最後配置 <code>_config.yml</code> options中的<code>theme： 改為新主題名</code> (注意冒號：後面先加個space空格鍵 不然報錯)</p>\n</li>\n</ul>\n<p><strong>3.2.3 添加插件 新建頁面</strong></p>\n<p>添加插件</p>\n<p><a href=\"http://hexo.io/docs/plugins.html\" target=\"_blank\" rel=\"external\">官方說明不錯</a>  瞄瞄吧 碼字好苦啊~</p>\n<p>添加頁面等</p>\n<pre><code>hexo <span class=\"keyword\">new</span> page <span class=\"string\">'page-name'</span>\n</code></pre><p><strong>3.2.4 添加自定義域名</strong></p>\n<p>感謝開源程序與大家無私的精神 終於可以通過 <a href=\"http://xxxx.github.io\" target=\"_blank\" rel=\"external\">http://xxxx.github.io</a> 訪問您的博客啦~~</p>\n<p>however 這個在github.io下的子域名有點長或者不爽的</p>\n<p>Github Pages支持用自定義域名  <code>萬惡的資本主義想得好周到嘛~</code></p>\n<p><strong>兩種情況</strong></p>\n<p><strong>1.有<code>example.com</code> 這樣的由頂級域名下的域名</strong>（叫一級域名？who knows）</p>\n<ul>\n<li><p>到repo目錄下新建 <code>CNAME</code> 文件，該文件只有一行，只需填 <code>example.com</code> </p>\n</li>\n<li><p>ping dig traceroute xxxx.github.io的ip 找最快最穩定的</p>\n</li>\n<li><p>到DNS服務商修改 <code>example.com</code> 的A 記錄指向 剛剛的ip</p>\n</li>\n<li><p>drink a cup of coffee and visit <a href=\"http://example.com\" target=\"_blank\" rel=\"external\">http://example.com</a> Enjoy it!</p>\n</li>\n</ul>\n<p><strong>2.有<code>abc.example.com</code> 的子域名</strong></p>\n<ul>\n<li><p>到repo目錄下新建 <code>CNAME</code> 文件，該文件只有一行，只需填 <code>abc.example.com</code> </p>\n</li>\n<li><p>到DNS服務商修改 <code>abc.example.com</code> 的CNAME 記錄指向 <code>abc.example.com</code> </p>\n</li>\n</ul>\n<p><a href=\"https://help.github.com/articles/about-custom-domains-for-github-pages-sites\" target=\"_blank\" rel=\"external\">more details!</a></p>\n<p>To be continued (額 手抽筋啦)…..</p>\n<p>PS:</p>\n<p>long time no write something elegantly with pure purpose.</p>\n<p>有問題歡迎留言哈 輕輕拍就好   LOL</p>\n","source":"_posts/new-hexo-blog.md","raw":"title: Migrate to Hexo\n---\n# 博客正式遷移到Hexo  #\n\n## 緣起 ##\n- 徘徊于WordPress  迷茫于VPS\n\n- 糾結選哪個blog framework安家 \n\n- 猛然發現平台真的不重要 折騰的心應該focus于內容\n\n- 希望得到舒適恬靜描描畫畫feelings （而不是臃腫擔心的後台admin）\n\n## 目標 ##\n\n - 簡潔優美的書寫環境\n - 輕鬆快捷的發佈服務端\n - 意外極端情況的應急修復能力\n \n<!--more-->\n\n## 擼起褲腿 思路+實現 ##\n\n    本地測試環境 \n    (現有)OS:win7 64bit  text編輯器：notepad++\n    (即將搭建)\n    [git](http://git-scm.com/ ) \n    [node.js npm](https://www.npmjs.org/)\n    [hexo 基於node.js靜態博客生成處理工具](http://hexo.io/)\n\n    遠程服務端環境\n    支持靜態化html解析的Github Pages\n    \n\n\n    \n## 本地 local environment setup ##\n\n1.win平台安裝git [官方地址 下載安裝即可](http://git-scm.com/downloads)\n \n2.本地安裝node.js [node-v0.10.27-x64(選合適的版本)](http://nodejs.org/dist/v0.10.27/x64/node-v0.10.27-x64.msi)\n \n3.安裝hexo ` $ npm install hexo -g` 非常簡潔\n\n **至此，本地配置完成，搭好高樓大廈的骨架，要準備充實內容啦~**\n\n## 服務端 remote environment setup ##\n\n4.開通github賬號 [官方註冊](http://github.com)\n\n5.新建repo 以xxxx.github.io命名的repository  **建立pages的重要關鍵**\n\n 至此，可以用https://github.com/xxxx/xxxx.github.io 訪問到新建的repo\n    \n（換言之確保 git clone https://github.com/xxxx/xxxx.github.io.git 可以正常）\n\n6.打開剛剛的repo主頁，點擊項目的setting(URI直接進入)https://github.com/xxxx/xxxx.github.io/settings 點擊Github Pages自動生成默認的頁面\n\n**至此可以通過xxxx.github.io訪問默認頁面了**（首次生效可能需要10min）\n \n\n**切換回本地操作**\n\n## 0.**利用ssh方式使用git** ##\n\n- 每次輸入賬號密碼簡直反人類\n\n- 利用ssh更安全快捷\n\n- 原理：客戶端生成的public key反饋回服務端得到認證 以後server-client通信就利用key匹配\n\n- 媽媽再也不用擔心我輸入密碼啦~\n\n進入Git Bash命令行 輸入\n\n    git config --global user.email \"your@email.com\"\n    git config --global user.name \"yourname\"\n    \n這兩步是設定客戶端的全局名稱和郵件信息（僅僅是標識作用 郵箱用戶名隨便填）\n\n**生成秘鑰**\n\n    ssh-keygen -t rsa -C \"your@email.com\"\n一路按 Enter 確認 最後得到秘鑰\n \n\n    Your identification has been saved in x:\\x\\.ssh\\id_rsa\n    Your public key has been saved in x:\\x\\.ssh\\id_rsa.pub\n    The key fingerprint is:\n    xx:xx:xx:xx:xx:ab:c1:50:10:40:0a:ba:c1:xx:xx:xx \n    \n然後,用文本编辑器打开**id_rsa.pub**文件,拷贝其中的内容,将其添加到 [官方Github add ssh key ](https://github.com/settings/ssh)\n\n**這一步目的是讓服務端認識客戶端 進行授權操作repo**。\n\n最後 執行命令\n\n    ssh -T git@github.com\n\n提示已經授權代表成功 告別https密碼登陸啦啦啦 （忽視warning）\n\n## **1.利用hexo初始化博客** ##\n\n本地新建博客主目錄 例如blog\n\n    hexo init <folder>\n\n完成**主程序**初始化 此時blog目錄應該create了很多文件 默認目錄結構\n\n    ├── node_modules\n    ├── scaffolds\n    ├── scripts\n    ├── source\n    |   ├── _drafts\n    |   └── _posts\n    ├── themes\n    ├── _config.yml\n    └── package.json\n\n根據程序默認配置 生成靜態博客文件\n   \n\n    hexo generate\n\n此時，主目錄下多了個子目錄 `public` 裡面就是整個博客的所有的靜態文件。\n\n進行本地預覽調試 啟動本地服務器 默認4000端口\n \n\n    hexo server\n\n現在通過 `https://localhost:40000` 就可以看到剛剛生成的博客了\n\n但這**僅僅**是本地可以訪問 （我們必須把它發佈到服務器 看下文）\n\n## **2.發佈博客到Github Pages服務器** ##\n     cd切換回博客的主目錄 前述的blog \n    \n**思路**\n\n- 2.1先把遠程的repo clone到本地\n\n- 2.2再刪除**github默認的pages文件**\n\n- 2.3上傳更新我們的新的博客靜態文件\n\n**2.1  先把遠程的repo clone到本地**\n \n\n    git clone git@github.com:xxxx/xxxx.github.io.git\n\n**2.2 再刪除github默認的pages文件**\n   \n    git rm -rf *\n    git commit -m 'delete origin pages files'\n    git push origin master\n\n到這裡 已經把原來的pages文件刪除 清空完 可以放新文件上去了\n\n**2.3上傳更新我們的新的博客靜態文件**\n\nhexo原生支持發佈到Github的遠程服務端，因而只需修改全局配置文件`_config.yml` 就可以方便更新Github Pages了\n\n用notepad++打開`_config.yml` 修改\n\n    # Deployment\n    ## Docs: http://hexo.io/docs/deployment.html\n    deploy:\n      type: github\n      repo: git@github.com:xxxx/xxxx.github.io.git\n      branch: master\n\n更多`_config.yml` 修改 [看官方docs](http://hexo.io/docs/)\n\n最後 執行 `hexo deploy -g` 就成功發佈到Github Pages了\n\n**驗證**\n\n通過能訪問 [xxxx.github.io](http://xxxx.github.io) 即證明成功publish\n\n\n**恭喜你 到現在終於把基本博客的最基本完成啦~（碼字君好累啊）**\n\n## 3.進階配置 advanced settings ##\n\n**3.1  hexo發佈過程全解析**     \n\n    \n\n**理順過程**\n\n-  1.hexo new 'hello-world' 本地編寫文章\n\n-  2.hexo generate 生成靜態\n \n-  3.hexo server 打開本地服務端 http://localhost:4000 調試\n \n-  4.hexo deploy 發佈到遠端服務器\n\n\n**看清原理**（對應上面過程來分析）\n\n\n- 1.hexo調用node.js生成.md文件 默認路徑`source\\_posts\\xx.md`\n\n- 2.hexo依據默認配置 生成靜態文件 默認生成在子目錄`public` 內\n\n- 3.hexo利用web服務器開啟本地web服務\n\n- 4.拷貝`public` 到`.deploy` 再執行git命令 讀取`_config.yml` 的deploy參數，`git add .` `git commit -m 'CommitMessage'` `git push origin [branch]` \n\n**升華小結下**  \n\n1.直接在相應目錄建立文件,再deploy的效果和`hexo new new-post-article`一樣，**eg.在`source\\_posts`下直接新建`xx.md`文件等效于`hexo n xx` (新建pages同理)** \n \n2.**手動執行`git add .` `git commit -m 'CommitMessage'` `git push origin [branch]` 等效同理于`hexo deploy`** \n \n故此 以後熟悉后直接變成**兩個步驟**\n\n    hexo new 'new-post-article'\n    hexo d -g \n\n稍等服務端就生效（最長10min）   \n\nhexo常用命令\n\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n\n## 3.2 博客站點個性化 sites customization ##\n\n**3.2.1 global settings**\n\n全局設置在博客主目錄下 （前例blog）的`_config.yml` 中\n默認配置如下  更多查看[官方docs](http://hexo.io/docs/configuration.html) 挺全面的\n主要修改：站點簡介、固定鏈接、默認目錄、主題theme選擇、發佈deploy方式等。\n\n    \n    title: Hexo\n    subtitle:\n    description:\n    author: John Doe\n    email:\n    language:\n    url: http://yoursite.com\n    root: /\n    permalink: :year/:month/:day/:title/\n    tag_dir: tags\n    archive_dir: archives\n    category_dir: categories\n    code_dir: downloads/code\n    new_post_name: :title.md\n    default_layout: post\n    auto_spacing: false\n    titlecase: false\n    filename_case: 0\n    render_drafts: false\n    post_asset_folder: false\n    relative_link: false\n    highlight:\n      enable: true\n      line_number: true\n      tab_replace:\n    default_category: uncategorized\n    category_map:\n    tag_map:\n    archive: 2\n    category: 2\n    tag: 2\n    port: 4000\n    logger: false\n    logger_format:\n    date_format: MMM D YYYY\n    time_format: H:mm:ss\n    per_page: 10\n    pagination_dir: page\n    disqus_shortname:\n    theme: light\n    exclude_generator:\n    deploy:\n      type:\n  \n**3.2.2 主題配色優化 theme customization**\n\n 主目錄下子目錄 `theme` 為主題文件夾所在,而 [官方hexo theme wiki參考](https://github.com/hexojs/hexo/wiki/Themes)  童靴們也可以自己寫add進去\n \n\n- 找到合適的 copy進來就好 git clone也行 whatever u like\n\n- 最後配置 `_config.yml` options中的`theme： 改為新主題名` (注意冒號：後面先加個space空格鍵 不然報錯)\n\n\n\n**3.2.3 添加插件 新建頁面**\n\n添加插件\n\n[官方說明不錯](http://hexo.io/docs/plugins.html)  瞄瞄吧 碼字好苦啊~\n\n\n添加頁面等\n\n    hexo new page 'page-name'\n\n\n**3.2.4 添加自定義域名**\n\n\n感謝開源程序與大家無私的精神 終於可以通過 http://xxxx.github.io 訪問您的博客啦~~\n\n\nhowever 這個在github.io下的子域名有點長或者不爽的\n\n\nGithub Pages支持用自定義域名  `萬惡的資本主義想得好周到嘛~`\n\n\n**兩種情況**\n\n\n**1.有`example.com` 這樣的由頂級域名下的域名**（叫一級域名？who knows）\n\n    \n\n- 到repo目錄下新建 `CNAME` 文件，該文件只有一行，只需填 `example.com` \n\n- ping dig traceroute xxxx.github.io的ip 找最快最穩定的\n\n- 到DNS服務商修改 `example.com` 的A 記錄指向 剛剛的ip\n\n- drink a cup of coffee and visit http://example.com Enjoy it!\n\n\n**2.有`abc.example.com` 的子域名**\n\n\n-  到repo目錄下新建 `CNAME` 文件，該文件只有一行，只需填 `abc.example.com` \n \n-  到DNS服務商修改 `abc.example.com` 的CNAME 記錄指向 `abc.example.com` \n \n\n\n[more details!](https://help.github.com/articles/about-custom-domains-for-github-pages-sites)\n\n\nTo be continued (額 手抽筋啦).....\n\nPS:\n\nlong time no write something elegantly with pure purpose.\n       \n有問題歡迎留言哈 輕輕拍就好   LOL\n\n","slug":"new-hexo-blog","date":1408957429000,"updated":1408958403000,"excerpt":"<h1 id=\"博客正式遷移到Hexo\">博客正式遷移到Hexo</h1>\n<h2 id=\"緣起\">緣起</h2>\n<ul>\n<li><p>徘徊于WordPress  迷茫于VPS</p>\n</li>\n<li><p>糾結選哪個blog framework安家 </p>\n</li>\n<li><p>猛然發現平台真的不重要 折騰的心應該focus于內容</p>\n</li>\n<li><p>希望得到舒適恬靜描描畫畫feelings （而不是臃腫擔心的後台admin）</p>\n</li>\n</ul>\n<h2 id=\"目標\">目標</h2>\n<ul>\n<li>簡潔優美的書寫環境</li>\n<li>輕鬆快捷的發佈服務端</li>\n<li>意外極端情況的應急修復能力</li>\n</ul>\n","_id":"f76s12h5mxzbo6w6","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[]}